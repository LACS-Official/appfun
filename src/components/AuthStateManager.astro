---
/**
 * 认证状态管理组件
 * 在页面加载时自动初始化和管理认证状态
 */
---

<script>
  // 等待认证管理器加载完成后再初始化
  async function initializeAuth() {
    try {
      console.log('初始化页面认证状态...');
      
      // 动态导入认证工具
      const { setupPageAuth, onAuthStateChange, getCurrentUser, getUserDisplayName } = await import('../lib/auth-utils');

      // 设置页面认证
      const cleanup = setupPageAuth();

      // 监听认证状态变化
      const unsubscribe = onAuthStateChange((isLoggedIn, user) => {
        console.log('认证状态变化:', { isLoggedIn, user: user ? getUserDisplayName(user) : null });

        // 更新页面中的用户信息显示
        updateUserDisplay(isLoggedIn, user);

        // 触发自定义事件，其他组件可以监听
        window.dispatchEvent(new CustomEvent('authStateChanged', {
          detail: { isLoggedIn, user }
        }));
      });

      // 页面卸载时清理
      window.addEventListener('beforeunload', () => {
        cleanup();
        unsubscribe();
      });

      // 初始更新用户显示
      const currentUser = getCurrentUser();
      updateUserDisplay(!!currentUser, currentUser);

      // 将工具函数设置为全局可用
      window.authUtils = {
        getCurrentUser,
        isLoggedIn: () => !!getCurrentUser(),
        onAuthStateChange,
        logout: handleLogout,
        getUserDisplayName
      };

      console.log('认证系统初始化完成');

    } catch (error) {
      console.error('认证系统初始化失败:', error);
    }
  }

  // 页面加载时初始化认证状态
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      // 延迟初始化，确保所有模块都已加载
      setTimeout(initializeAuth, 100);
    });
  } else {
    // 如果页面已经加载完成，立即初始化
    setTimeout(initializeAuth, 100);
  }

  /**
   * 更新页面中的用户信息显示
   */
  function updateUserDisplay(isLoggedIn, user) {
    // 更新导航栏中的用户信息
    updateNavUserInfo(isLoggedIn, user);
    
    // 更新页面中的登录状态相关元素
    updateLoginStateElements(isLoggedIn, user);
  }

  /**
   * 更新导航栏用户信息
   */
  function updateNavUserInfo(isLoggedIn, user) {
    // 查找导航栏中的用户信息元素
    const userNameElement = document.querySelector('[data-user-name]');
    const userEmailElement = document.querySelector('[data-user-email]');
    const userAvatarElement = document.querySelector('[data-user-avatar]');
    const userIdElement = document.querySelector('[data-user-id]');
    
    // 查找登录/登出按钮
    const loginButton = document.querySelector('[data-login-button]');
    const logoutButton = document.querySelector('[data-logout-button]');
    const userMenu = document.querySelector('[data-user-menu]');
    
    if (isLoggedIn && user) {
      // 显示用户信息
      if (userNameElement) {
        userNameElement.textContent = getUserDisplayName(user);
      }
      if (userEmailElement) {
        userEmailElement.textContent = user.email || '';
      }
      if (userIdElement) {
        userIdElement.textContent = `#${user.id}`;
      }
      if (userAvatarElement) {
        const avatarUrl = user.avatar || `https://ui-avatars.com/api/?name=${encodeURIComponent(getUserDisplayName(user))}&background=random`;
        if (userAvatarElement.tagName === 'IMG') {
          userAvatarElement.src = avatarUrl;
        } else {
          userAvatarElement.style.backgroundImage = `url(${avatarUrl})`;
        }
      }
      
      // 显示/隐藏相关按钮
      if (loginButton) loginButton.style.display = 'none';
      if (logoutButton) logoutButton.style.display = 'block';
      if (userMenu) userMenu.style.display = 'block';
      
      // 显示个人中心链接
      const profileLinks = document.querySelectorAll('[data-profile-link]');
      profileLinks.forEach(link => {
        link.style.display = 'block';
        if (link.tagName === 'A' && !link.getAttribute('href')) {
          link.setAttribute('href', '/profile');
        }
      });
      
    } else {
      // 隐藏用户信息
      if (userNameElement) userNameElement.textContent = '';
      if (userEmailElement) userEmailElement.textContent = '';
      if (userIdElement) userIdElement.textContent = '';
      if (userAvatarElement) {
        if (userAvatarElement.tagName === 'IMG') {
          userAvatarElement.src = '';
        } else {
          userAvatarElement.style.backgroundImage = '';
        }
      }
      
      // 显示/隐藏相关按钮
      if (loginButton) loginButton.style.display = 'block';
      if (logoutButton) logoutButton.style.display = 'none';
      if (userMenu) userMenu.style.display = 'none';
      
      // 隐藏个人中心链接
      const profileLinks = document.querySelectorAll('[data-profile-link]');
      profileLinks.forEach(link => {
        link.style.display = 'none';
      });
    }
  }

  /**
   * 更新页面中的登录状态相关元素
   */
  function updateLoginStateElements(isLoggedIn, user) {
    // 查找需要登录才显示的元素
    const loginRequiredElements = document.querySelectorAll('[data-require-login]');
    const loggedOutElements = document.querySelectorAll('[data-require-logout]');
    
    loginRequiredElements.forEach(element => {
      element.style.display = isLoggedIn ? 'block' : 'none';
    });
    
    loggedOutElements.forEach(element => {
      element.style.display = isLoggedIn ? 'none' : 'block';
    });
    
    // 更新用户特定信息
    const userSpecificElements = document.querySelectorAll('[data-user-info]');
    userSpecificElements.forEach(element => {
      const infoType = element.getAttribute('data-user-info');
      if (isLoggedIn && user && infoType) {
        switch (infoType) {
          case 'name':
            element.textContent = getUserDisplayName(user);
            break;
          case 'email':
            element.textContent = user.email || '';
            break;
          case 'id':
            element.textContent = `#${user.id}`;
            break;
          case 'username':
            element.textContent = user.username || '';
            break;
          case 'full_name':
            element.textContent = user.full_name || '';
            break;
          default:
            if (user[infoType]) {
              element.textContent = user[infoType];
            }
        }
      } else {
        element.textContent = '';
      }
    });
  }

  /**
   * 处理登出按钮点击
   */
  function handleLogout() {
    // 使用全局的 authManager 实例
    if (window.authManager) {
      window.authManager.signOut().then((result) => {
        if (result.success) {
          console.log('登出成功');
          // 重定向到首页或登录页
          window.location.href = '/';
        } else {
          console.error('登出失败:', result.error);
          alert('登出失败，请重试');
        }
      });
    } else {
      // 降级：直接清除本地存储
      localStorage.removeItem('supabase_auth_data');
      console.log('登出成功（降级模式）');
      window.location.href = '/';
    }
  }

  // 绑定登出按钮事件
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    if (target && (target.hasAttribute('data-logout-button') || target.closest('[data-logout-button]'))) {
      event.preventDefault();
      handleLogout();
    }
  });
</script>

<!-- 样式：隐藏未初始化的元素，避免闪烁 -->
<style>
  [data-require-login],
  [data-require-logout],
  [data-user-menu] {
    display: none;
  }
  
  /* 加载状态指示器 */
  .auth-loading {
    opacity: 0.6;
    pointer-events: none;
  }
  
  /* 用户头像样式 */
  [data-user-avatar] {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
    background-size: cover;
    background-position: center;
  }
</style>
