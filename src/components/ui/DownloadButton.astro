---
// 导入组件所需的样式和依赖
import { cn } from '../../lib/utils';

// 组件属性定义
interface DownloadButtonProps {
  text?: string;
  downloadUrl: string;
  className?: string;
}

// 默认值设置
const {
  text = '下载',
  downloadUrl,
  className = '',
} = Astro.props;

// 组合类名
const buttonClassName = cn(
  'inline-flex items-center justify-center px-4 py-2 rounded-md font-medium text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50',
  className
);
---

<button 
  class={buttonClassName} 
  data-download-url={downloadUrl}
  aria-label="下载软件"
>
  <!-- 下载图标 -->
  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
  </svg>
  
  <!-- 按钮文本 -->
  <span class="download-text">{text}</span>
</button>

<script>
  import { appConfig } from '../../lib/config';

  class DownloadButtonManager {
    private button: HTMLButtonElement;
    private downloadUrl: string;
    private originalText: string;
    private downloadText: HTMLElement;

    constructor(button: HTMLButtonElement) {
      this.button = button;
      this.downloadUrl = button.dataset.downloadUrl || '';
      this.downloadText = button.querySelector('.download-text') as HTMLElement;
      this.originalText = this.downloadText.textContent || '下载';

      this.init();
    }

    private init(): void {
      // 绑定点击事件
      this.button.addEventListener('click', (e) => this.handleClick(e));
      
      // 初始化按钮状态（默认启用）
      this.setEnabledState();
    }

    private setEnabledState(): void {
      this.button.disabled = false;
      this.button.classList.remove('opacity-50', 'cursor-not-allowed', 'bg-gray-400', 'text-gray-600');
    }

    private handleClick(event: Event): void {
      event.preventDefault();
      this.performDownload();
    }

    private performDownload(): void {
      if (this.downloadUrl) {
        window.open(this.downloadUrl, '_blank', 'noopener,noreferrer');

        window.dispatchEvent(new CustomEvent('downloadStarted', {
          detail: { url: this.downloadUrl }
        }));
      }
    }
  }

  // 初始化所有下载按钮
  document.addEventListener('DOMContentLoaded', () => {
    const downloadButtons = document.querySelectorAll('[data-download-url]');
    downloadButtons.forEach(button => {
      new DownloadButtonManager(button as HTMLButtonElement);
    });
  });

  // 为动态添加的按钮提供初始化函数
  window.initializeDownloadButton = (button: HTMLButtonElement) => {
    new DownloadButtonManager(button);
  };
</script>

<style>
  .download-text {
    display: inline;
  }
</style>
