---
import SoftwareCard from './SoftwareCard.astro';
import LoadingSpinner from '../ui/LoadingSpinner.astro';
import ErrorMessage from '../ui/ErrorMessage.astro';
import type { Software } from '../../types/api';

interface Props {
  title?: string;
  limit?: number;
  showViewAll?: boolean;
  class?: string;
}

const {
  title = 'üî• ÁÉ≠Èó®ËΩØ‰ª∂',
  limit = 6,
  showViewAll = true,
  class: className = ''
} = Astro.props;
---

<section class={`${className}`}>
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-2xl font-bold text-gray-900">{title}</h2>
    {showViewAll && (
      <a 
        href="/ranking" 
        class="text-primary-600 hover:text-primary-700 font-medium text-sm flex items-center"
      >
        Êü•ÁúãÂÖ®ÈÉ®
        <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </a>
    )}
  </div>

  <!-- Âä†ËΩΩÁä∂ÊÄÅ -->
  <div id="popular-software-loading" class="flex justify-center py-12">
    <LoadingSpinner size="lg" text="Ê≠£Âú®Âä†ËΩΩÁÉ≠Èó®ËΩØ‰ª∂..." />
  </div>

  <!-- ÈîôËØØÁä∂ÊÄÅ -->
  <div id="popular-software-error" class="hidden">
    <ErrorMessage 
      title="Âä†ËΩΩÂ§±Ë¥•" 
      message="Êó†Ê≥ïÂä†ËΩΩÁÉ≠Èó®ËΩØ‰ª∂ÔºåËØ∑Á®çÂêéÈáçËØï"
    />
    <div class="text-center mt-4">
      <button 
        id="popular-software-retry" 
        class="btn btn-primary"
      >
        ÈáçÊñ∞Âä†ËΩΩ
      </button>
    </div>
  </div>

  <!-- ËΩØ‰ª∂ÂàóË°® -->
  <div id="popular-software-container" class="hidden">
    <!-- ËΩØ‰ª∂Âç°ÁâáÂ∞ÜÂú®ËøôÈáåÂä®ÊÄÅÂä†ËΩΩ -->
  </div>

  <!-- Á©∫Áä∂ÊÄÅ -->
  <div id="popular-software-empty" class="hidden text-center py-12">
    <div class="text-gray-400 text-6xl mb-4">üìä</div>
    <h3 class="text-lg font-medium text-gray-900 mb-2">ÊöÇÊó†ÁÉ≠Èó®ËΩØ‰ª∂</h3>
    <p class="text-gray-500">ËøòÊ≤°ÊúâËΩØ‰ª∂ÊµèËßàÊï∞ÊçÆ</p>
  </div>
</section>

<script>
  import { getApiClient } from '../../lib/api';

  // Êâ©Â±ïWindowÊé•Âè£
  interface Window {
    initializeDownloadButton?: (button: HTMLElement) => void;
  }

  // Á±ªÂûãÊñ≠Ë®Ä
  declare const window: Window & typeof globalThis;

  class PopularSoftwareComponent {
    private container: HTMLElement | null = null;
    private loadingElement: HTMLElement | null = null;
    private errorElement: HTMLElement | null = null;
    private emptyElement: HTMLElement | null = null;
    private retryButton: HTMLElement | null = null;
    private limit: number;

    constructor(limit: number = 6) {
      this.limit = limit;
      this.init();
    }

    private init() {
      this.container = document.getElementById('popular-software-container');
      this.loadingElement = document.getElementById('popular-software-loading');
      this.errorElement = document.getElementById('popular-software-error');
      this.emptyElement = document.getElementById('popular-software-empty');
      this.retryButton = document.getElementById('popular-software-retry');

      if (this.retryButton) {
        this.retryButton.addEventListener('click', () => this.loadPopularSoftware());
      }

      this.loadPopularSoftware();
    }

    private showLoading() {
      this.hideAll();
      this.loadingElement?.classList.remove('hidden');
    }

    private showError() {
      this.hideAll();
      this.errorElement?.classList.remove('hidden');
    }

    private showEmpty() {
      this.hideAll();
      this.emptyElement?.classList.remove('hidden');
    }

    private showContent() {
      this.hideAll();
      this.container?.classList.remove('hidden');
    }

    private hideAll() {
      this.loadingElement?.classList.add('hidden');
      this.errorElement?.classList.add('hidden');
      this.emptyElement?.classList.add('hidden');
      this.container?.classList.add('hidden');
    }

    private async loadPopularSoftware() {
      this.showLoading();

      try {
        const api = getApiClient();
        const response = await api.getSoftwareRanking({
          page: 1,
          limit: this.limit,
          sortBy: 'viewCount',
          sortOrder: 'desc'
        });

        if (response.success && response.data) {
          const softwareList = response.data;
          
          if (!Array.isArray(softwareList) || softwareList.length === 0) {
            this.showEmpty();
            return;
          }

          this.renderSoftwareList(softwareList);
          this.showContent();
        } else {
          throw new Error(response.message || 'Ëé∑ÂèñÁÉ≠Èó®ËΩØ‰ª∂Â§±Ë¥•');
        }
      } catch (error) {
        console.error('Âä†ËΩΩÁÉ≠Èó®ËΩØ‰ª∂Â§±Ë¥•:', error);
        this.showError();
      }
    }

    private renderSoftwareList(softwareList: any[]) {
      if (!this.container) return;

      this.container.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          ${softwareList.map((software, index) => `
            <div class="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200 relative">
              ${software.rank && software.rank <= 3 ? `
                <div class="absolute -top-2 -right-2 z-10">
                  <div class="w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${
                    software.rank === 1 ? 'bg-yellow-500' :
                    software.rank === 2 ? 'bg-gray-400' :
                    'bg-orange-500'
                  }">
                    ${software.rank}
                  </div>
                </div>
              ` : ''}
              <div class="p-6">
                <div class="flex items-start justify-between mb-3">
                  <div class="flex-1 min-w-0">
                    <h3 class="text-lg font-semibold text-gray-900 truncate">
                      <a href="/software/${software.id}" class="hover:text-primary-600 transition-colors">
                        ${software.name}
                      </a>
                    </h3>
                    ${software.nameEn ? `<p class="text-sm text-gray-500 truncate mt-1">${software.nameEn}</p>` : ''}
                  </div>
                  <div class="flex flex-col items-end space-y-1 ml-4">
                    <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-primary-100 text-primary-800">
                      v${software.currentVersion}
                    </span>
                    ${software.category ? `
                      <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-gray-100 text-gray-800">
                        ${software.category}
                      </span>
                    ` : ''}
                  </div>
                </div>

                ${software.description ? `
                  <p class="text-gray-600 text-sm mb-4 line-clamp-2">
                    ${software.description}
                  </p>
                ` : ''}

                <div class="flex items-center justify-between text-sm text-gray-500 mb-4">
                  <div class="flex items-center space-x-4">
                    ${software.viewCount !== undefined ? `
                      <span class="flex items-center text-orange-600 font-medium">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                        ${software.viewCount.toLocaleString()}
                      </span>
                    ` : ''}
                  </div>
                  <span class="text-xs">
                    ${this.formatDate(software.updatedAt)}
                  </span>
                </div>

                <div class="flex items-center justify-between">
                  <a href="/software/${software.id}" class="btn btn-outline btn-sm">
                    Êü•ÁúãËØ¶ÊÉÖ
                  </a>
                  ${software.latestDownloadUrl ? `
                    <button
                      class="btn btn-primary btn-sm"
                      data-download-url="${software.latestDownloadUrl}"
                      data-show-login-prompt="true"
                      type="button">
                      <span class="download-text">‰∏ãËΩΩ</span>
                      <span class="login-prompt-text hidden">ÁôªÂΩï‰∏ãËΩΩ</span>
                    </button>
                  ` : ''}
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;

      // ÂàùÂßãÂåñÊñ∞Ê∑ªÂä†ÁöÑ‰∏ãËΩΩÊåâÈíÆ
      this.initializeDownloadButtons();
    }

    private initializeDownloadButtons(): void {
      // Á≠âÂæÖÂÖ®Â±Ä‰∏ãËΩΩÊåâÈíÆÂàùÂßãÂåñÂáΩÊï∞ÂèØÁî®
      setTimeout(() => {
        const initFn = window.initializeDownloadButton;
        if (typeof initFn === 'function') {
          const downloadButtons = this.container?.querySelectorAll('[data-download-url]') || [];
          downloadButtons.forEach(button => {
            if (button instanceof HTMLElement) {
              initFn(button);
            }
          });
        }
      }, 100);
    }

    private formatDate(dateString: string): string {
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString('zh-CN', {
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        });
      } catch {
        return dateString;
      }
    }
  }

  // ÂàùÂßãÂåñÁªÑ‰ª∂
  document.addEventListener('DOMContentLoaded', () => {
    new PopularSoftwareComponent(6);
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
