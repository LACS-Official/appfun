---
import LoadingSpinner from '../ui/LoadingSpinner.astro';
import ErrorMessage from '../ui/ErrorMessage.astro';

interface Props {
  title?: string;
  tags?: string | string[];
  limit?: number;
  showViewAll?: boolean;
  class?: string;
  sortBy?: 'name' | 'updatedAt' | 'createdAt' | 'viewCount';
  sortOrder?: 'asc' | 'desc';
  description?: string;
}

const {
  title = '软件列表',
  tags = '',
  limit = 12, // 未使用但保留接口兼容性
  showViewAll = false,
  class: className = '',
  sortBy = 'updatedAt',
  sortOrder = 'desc',
  description = ''
} = Astro.props;

// 处理标签参数
const tagsString = Array.isArray(tags) ? tags.join(',') : tags;
const tagsArray = Array.isArray(tags) ? tags : (tags ? tags.split(',').map(t => t.trim()).filter(Boolean) : []);
---

<section class={`${className}`}>
  <div class="flex flex-col mb-6">
    <div class="flex items-center justify-between mb-2">
      <h1 class="text-3xl font-bold text-gray-900">{title}</h1>
      {showViewAll && (
        <a 
          href="/software" 
          class="text-primary-600 hover:text-primary-700 font-medium text-sm flex items-center"
        >
          查看全部
          <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      )}
    </div>
    {description && (
      <p class="text-gray-600 text-lg">{description}</p>
    )}
    {tagsArray.length > 0 && (
      <div class="flex flex-wrap gap-2 mt-3">
        {tagsArray.map(tag => (
          <span class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium bg-blue-100 text-blue-800">
            #{tag}
          </span>
        ))}
      </div>
    )}
  </div>

  <!-- 加载状态 -->
  <div id="software-list-loading" class="flex justify-center py-12">
    <LoadingSpinner size="lg" text="正在加载软件列表..." />
  </div>

  <!-- 错误状态 -->
  <div id="software-list-error" class="hidden">
    <ErrorMessage 
      title="加载失败" 
      message="无法加载软件列表，请稍后重试"
    />
    <div class="text-center mt-4">
      <button 
        id="software-list-retry" 
        class="btn btn-primary"
      >
        重新加载
      </button>
    </div>
  </div>

  <!-- 软件网格 -->
  <div id="software-list-container" class="hidden">
    <!-- 软件卡片将在这里动态加载 -->
  </div>

  <!-- 空状态 -->
  <div id="software-list-empty" class="hidden text-center py-12">
    <div class="text-gray-400 text-6xl mb-4">📦</div>
    <h3 class="text-lg font-medium text-gray-900 mb-2">暂无软件</h3>
    <p class="text-gray-500">
      {tagsArray.length > 0 
        ? `没有找到包含标签 "${tagsArray.join(', ')}" 的软件`
        : '还没有添加任何软件'
      }
    </p>
  </div>

  <!-- 分页控件 -->
  <div id="software-list-pagination" class="hidden mt-8">
    <!-- 分页将在这里动态加载 -->
  </div>
</section>

<script define:vars={{ tagsString, limit, sortBy, sortOrder }}>
  // API 客户端将从全局变量获取

  class SoftwareListByTagsComponent {
    constructor(tags, limit = 12, sortBy = 'updatedAt', sortOrder = 'desc') {
      this.container = null;
      this.loadingElement = null;
      this.errorElement = null;
      this.emptyElement = null;
      this.paginationElement = null;
      this.retryButton = null;
      this.tags = tags;
      this.limit = limit;
      this.sortBy = sortBy;
      this.sortOrder = sortOrder;
      this.currentPage = 1;
      this.totalPages = 1;
      this.init();
    }

    init() {
      this.container = document.getElementById('software-list-container');
      this.loadingElement = document.getElementById('software-list-loading');
      this.errorElement = document.getElementById('software-list-error');
      this.emptyElement = document.getElementById('software-list-empty');
      this.paginationElement = document.getElementById('software-list-pagination');
      this.retryButton = document.getElementById('software-list-retry');

      if (this.retryButton) {
        this.retryButton.addEventListener('click', () => this.loadSoftwareList());
      }

      this.loadSoftwareList();
    }

    showLoading() {
      this.hideAll();
      this.loadingElement?.classList.remove('hidden');
    }

    showError() {
      this.hideAll();
      this.errorElement?.classList.remove('hidden');
    }

    showEmpty() {
      this.hideAll();
      this.emptyElement?.classList.remove('hidden');
    }

    showContent() {
      this.hideAll();
      this.container?.classList.remove('hidden');
      this.paginationElement?.classList.remove('hidden');
    }

    hideAll() {
      this.loadingElement?.classList.add('hidden');
      this.errorElement?.classList.add('hidden');
      this.emptyElement?.classList.add('hidden');
      this.container?.classList.add('hidden');
      this.paginationElement?.classList.add('hidden');
    }

    async loadSoftwareList(page = 1) {
      this.showLoading();
      this.currentPage = page;

      try {
        // 获取全局API客户端
        const api = window.apiClient;
        if (!api) {
          throw new Error('API客户端未初始化');
        }
        const params = {
          page: this.currentPage,
          limit: this.limit,
          sortBy: this.sortBy,
          sortOrder: this.sortOrder
        };

        // 如果有标签参数，添加到请求中
        if (this.tags) {
          params.tags = this.tags;
        }

        const response = await api.getSoftwareList(params);

        if (response.success && response.data && response.data.software) {
          const softwareList = response.data.software;

          if (!Array.isArray(softwareList) || softwareList.length === 0) {
            this.showEmpty();
            return;
          }

          this.renderSoftwareGrid(softwareList);
          
          // 处理分页信息
          if (response.pagination) {
            this.totalPages = response.pagination.totalPages || 1;
            this.renderPagination(response.pagination);
          }
          
          this.showContent();
        } else {
          throw new Error(response.message || '获取软件列表失败');
        }
      } catch (error) {
        console.error('加载软件列表失败:', error);
        this.showError();
      }
    }

    renderSoftwareGrid(softwareList) {
      if (!this.container) return;

      this.container.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          ${softwareList.map((software) => `
            <div class="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200 cursor-pointer" onclick="window.location.href='/software/${software.id}'">
              <div class="p-6">
                <!-- 软件标题和版本 -->
                <div class="flex items-start justify-between mb-4">
                  <div class="flex-1 min-w-0">
                    <h3 class="text-xl font-semibold text-gray-900 truncate hover:text-primary-600 transition-colors">
                      ${software.name}
                    </h3>
                    ${software.nameEn ? `<p class="text-sm text-gray-500 truncate mt-1">${software.nameEn}</p>` : ''}
                  </div>
                  <div class="flex flex-col items-end space-y-2 ml-4">
                    <span class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium bg-primary-100 text-primary-800">
                      v${software.currentVersion}
                    </span>
                    ${software.category ? `
                      <span class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium bg-gray-100 text-gray-800">
                        ${software.category}
                      </span>
                    ` : ''}
                  </div>
                </div>

                <!-- 软件描述 -->
                ${software.description ? `
                  <p class="text-gray-600 text-sm mb-4 line-clamp-3">
                    ${software.description}
                  </p>
                ` : ''}

                <!-- 标签 -->
                ${software.tags && software.tags.length > 0 ? `
                  <div class="flex flex-wrap gap-1 mb-4">
                    ${software.tags.slice(0, 3).map(tag => `
                      <span class="inline-flex items-center rounded-full px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800">
                        #${tag}
                      </span>
                    `).join('')}
                    ${software.tags.length > 3 ? `
                      <span class="inline-flex items-center rounded-full px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600">
                        +${software.tags.length - 3}
                      </span>
                    ` : ''}
                  </div>
                ` : ''}

                <!-- 统计信息 -->
                <div class="flex items-center justify-between text-sm text-gray-500 mb-4">
                  <div class="flex items-center space-x-4">
                    ${software.viewCount !== undefined ? `
                      <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                        ${software.viewCount.toLocaleString()}
                      </span>
                    ` : ''}
                    ${software.updatedAt ? `
                      <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        ${this.formatTimeAgo(software.updatedAt)}
                      </span>
                    ` : ''}
                  </div>
                </div>

                <!-- 操作按钮 -->
                <div class="flex items-center justify-between pt-2 border-t border-gray-100">
                  <div class="flex items-center space-x-2">
                    ${software.officialWebsite ? `
                      <a 
                        href="${software.officialWebsite}"
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-gray-400 hover:text-gray-600 transition-colors"
                        title="官方网站"
                        onclick="event.stopPropagation()"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                        </svg>
                      </a>
                    ` : ''}
                  </div>
                  ${software.latestDownloadUrl ? `
                    <a href="${software.latestDownloadUrl}" target="_blank" rel="noopener noreferrer" class="btn btn-primary" data-protected-download="true" onclick="event.stopPropagation()">
                      立即下载
                    </a>
                  ` : ''}
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    }

    renderPagination(pagination) {
      if (!this.paginationElement || pagination.totalPages <= 1) {
        this.paginationElement?.classList.add('hidden');
        return;
      }

      const { page, totalPages, total } = pagination;

      this.paginationElement.innerHTML = `
        <div class="flex items-center justify-between">
          <div class="text-sm text-gray-700">
            显示第 ${((page - 1) * this.limit) + 1} - ${Math.min(page * this.limit, total)} 条，共 ${total} 条结果
          </div>
          <div class="flex items-center space-x-2">
            ${page > 1 ? `
              <button class="pagination-btn" data-page="${page - 1}">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
            ` : ''}

            ${this.generatePageNumbers(page, totalPages).map(pageNum => `
              ${pageNum === '...' ? `
                <span class="px-3 py-2 text-gray-500">...</span>
              ` : `
                <button class="pagination-btn ${pageNum === page ? 'active' : ''}" data-page="${pageNum}">
                  ${pageNum}
                </button>
              `}
            `).join('')}

            ${page < totalPages ? `
              <button class="pagination-btn" data-page="${page + 1}">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            ` : ''}
          </div>
        </div>
      `;

      // 添加分页点击事件
      this.paginationElement.querySelectorAll('.pagination-btn[data-page]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.currentTarget;
          const page = parseInt(target.dataset.page || '1');
          this.loadSoftwareList(page);
        });
      });
    }

    generatePageNumbers(currentPage, totalPages) {
      const pages = [];

      if (totalPages <= 7) {
        for (let i = 1; i <= totalPages; i++) {
          pages.push(i);
        }
      } else {
        pages.push(1);

        if (currentPage > 4) {
          pages.push('...');
        }

        const start = Math.max(2, currentPage - 1);
        const end = Math.min(totalPages - 1, currentPage + 1);

        for (let i = start; i <= end; i++) {
          pages.push(i);
        }

        if (currentPage < totalPages - 3) {
          pages.push('...');
        }

        pages.push(totalPages);
      }

      return pages;
    }

    formatTimeAgo(dateString) {
      try {
        const date = new Date(dateString);
        const now = new Date();
        const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

        if (diffInSeconds < 60) return '刚刚';
        if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}分钟前`;
        if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}小时前`;
        if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)}天前`;

        return date.toLocaleDateString('zh-CN', {
          month: 'short',
          day: 'numeric'
        });
      } catch {
        return dateString;
      }
    }
  }

  // 初始化组件
  document.addEventListener('DOMContentLoaded', () => {
    new SoftwareListByTagsComponent(tagsString, limit, sortBy, sortOrder);
  });
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .btn {
    @apply inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors;
  }

  .btn-primary {
    @apply text-white bg-primary-600 hover:bg-primary-700 focus:ring-primary-500;
  }

  .btn-outline {
    @apply text-gray-700 bg-white border-gray-300 hover:bg-gray-50 focus:ring-primary-500;
  }

  .pagination-btn {
    @apply inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors;
  }

  .pagination-btn.active {
    @apply text-primary-600 bg-primary-50 border-primary-500;
  }

  .pagination-btn:first-child {
    @apply rounded-l-md;
  }

  .pagination-btn:last-child {
    @apply rounded-r-md;
  }

  .pagination-btn:not(:first-child) {
    @apply -ml-px;
  }
</style>
