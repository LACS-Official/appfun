---
// 这个组件用于包装注册表单
---

<div id="signup-form-container">
  <!-- 注册表单将在这里渲染 -->
</div>

<!-- Supabase 未配置提示 -->
<div id="config-warning" class="hidden bg-yellow-50 border border-yellow-200 rounded-lg p-6">
  <div class="flex items-start space-x-3">
    <svg class="w-6 h-6 text-yellow-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
    </svg>
    <div>
      <h3 class="text-lg font-medium text-yellow-800 mb-2">认证系统未配置</h3>
      <p class="text-yellow-700 mb-4">
        Supabase 认证服务尚未配置。请先配置 Supabase 项目以启用注册功能。
      </p>
      <a href="/auth/setup" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-yellow-800 bg-yellow-100 hover:bg-yellow-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500">
        配置认证系统
      </a>
    </div>
  </div>
</div>

<script>
  // 扩展Window接口
  interface Window {
    authUtils?: {
      isLoggedIn: () => boolean;
    };
    authManager?: {
      getAuthState: () => any;
      signUp: (email: string, password: string) => Promise<{ success: boolean; error?: string; user?: any }>;
    };
    authStatusIndicator?: {
      showCustomMessage: (message: string, type: string) => void;
    };
  }

  // 使用纯 JavaScript 创建注册表单
  document.addEventListener('DOMContentLoaded', () => {
    // 检查用户是否已登录，如果已登录则直接跳转到主页
    if (typeof window !== 'undefined' && (window as any).authUtils && typeof (window as any).authUtils.isLoggedIn === 'function') {
      const authUtils = (window as any).authUtils;
      if (authUtils.isLoggedIn()) {
        console.log('用户已登录，重定向到主页');
        window.location.href = '/';
        return;
      }
    }

    // 检查认证系统是否可用
    setTimeout(() => {
      const container = document.getElementById('signup-form-container');
      const warning = document.getElementById('config-warning');

      // 再次检查登录状态（防止状态恢复延迟）
      if (typeof window !== 'undefined' && (window as any).authUtils && typeof (window as any).authUtils.isLoggedIn === 'function') {
        const authUtils = (window as any).authUtils;
        if (authUtils.isLoggedIn()) {
          console.log('用户已登录（延迟检查），重定向到主页');
          window.location.href = '/';
          return;
        }
      }

      if (typeof window !== 'undefined' && window.authManager) {
        const authState = window.authManager.getAuthState();

        if (authState.error && authState.error.includes('Supabase 未配置')) {
          // 显示配置警告
          if (container) container.style.display = 'none';
          if (warning) warning.classList.remove('hidden');
          return;
        }
      }
      
      // 创建注册表单 HTML
      if (container) {
        container.innerHTML = `
          <div class="bg-white rounded-lg shadow-md p-8">
            <div class="mb-6">
              <h2 class="text-2xl font-bold text-gray-900">注册账号</h2>
              <p class="text-gray-600 mt-2">创建您的新账号以开始使用</p>
            </div>
            
            <form id="signup-form" class="space-y-6">
              <div>
                <label for="email" class="block text-sm font-medium text-gray-700">邮箱</label>
                <input
                  id="email"
                  type="email"
                  required
                  class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="请输入邮箱地址"
                />
              </div>
              
              <div>
                <label for="password" class="block text-sm font-medium text-gray-700">密码</label>
                <input
                  id="password"
                  type="password"
                  required
                  class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="请输入密码（至少6位）"
                />
              </div>
              
              <div>
                <label for="repeat-password" class="block text-sm font-medium text-gray-700">确认密码</label>
                <input
                  id="repeat-password"
                  type="password"
                  required
                  class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="请再次输入密码"
                />
              </div>

              <div>
                <label for="invite-code" class="block text-sm font-medium text-gray-700">邀请码</label>
                <input
                  id="invite-code"
                  type="text"
                  required
                  maxlength="8"
                  class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 font-mono text-center text-lg tracking-widest uppercase"
                  placeholder="请输入8位邀请码"
                  style="letter-spacing: 0.2em;"
                />

                <!-- 获取邀请码说明 -->
                <div class="mt-4 p-4 bg-gray-50 rounded-lg border">
                  <div class="flex flex-col md:flex-row gap-4 items-center">
                    <div class="flex-shrink-0">
                      <img
                        src="/img/qrcode_for_gh_a00e889e59b3_258.jpg"
                        alt="微信公众号二维码"
                        class="w-24 h-24 rounded-lg border border-gray-200"
                      />
                    </div>
                    <div class="flex-1 text-center md:text-left">
                      <h4 class="font-medium text-sm mb-2 text-gray-900">如何获取邀请码？</h4>
                      <div class="text-xs text-gray-600 leading-relaxed space-y-1">
                        <p>1. 扫描二维码关注公众号</p>
                        <p>2. 点击底部菜单"领创账号"</p>
                        <p>3. 点击"获取邀请码"</p>
                        <p>4. 在小程序中观看广告后获得邀请码</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div id="error-message" class="hidden text-sm text-red-600 bg-red-50 p-3 rounded-md"></div>
              
              <button
                type="submit"
                id="signup-button"
                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                注册
              </button>
            </form>
            
            <div class="mt-6 text-center text-sm">
              已有账号？
              <a href="/auth/login" class="text-blue-600 hover:text-blue-800">
                登录
              </a>
            </div>
          </div>
        `;
        
        // 绑定表单提交事件
        const form = document.getElementById('signup-form') as HTMLFormElement | null;
        const emailInput = document.getElementById('email') as HTMLInputElement | null;
        const passwordInput = document.getElementById('password') as HTMLInputElement | null;
        const repeatPasswordInput = document.getElementById('repeat-password') as HTMLInputElement | null;
        const inviteCodeInput = document.getElementById('invite-code') as HTMLInputElement | null;
        const errorMessage = document.getElementById('error-message');
        const signupButton = document.getElementById('signup-button') as HTMLButtonElement | null;
        
        if (form && emailInput && passwordInput && repeatPasswordInput && inviteCodeInput && errorMessage && signupButton) {
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = emailInput.value;
            const password = passwordInput.value;
            const repeatPassword = repeatPasswordInput.value;
            const inviteCode = inviteCodeInput.value.trim().toUpperCase();

            if (!email || !password || !repeatPassword || !inviteCode) {
              showError(errorMessage, '请填写所有字段');
              return;
            }

            if (password !== repeatPassword) {
              showError(errorMessage, '两次输入的密码不一致');
              return;
            }

            if (password.length < 6) {
              showError(errorMessage, '密码长度至少为6位');
              return;
            }

            if (inviteCode.length !== 8) {
              showError(errorMessage, '邀请码必须为8位');
              return;
            }
            
            // 显示加载状态
            signupButton.disabled = true;
            signupButton.textContent = '注册中...';
            hideError(errorMessage);
            
            try {
              // 首先验证邀请码
              const inviteValidationResponse = await fetch('/api/auth/validate-invitation', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code: inviteCode }),
              });

              if (!inviteValidationResponse.ok) {
                showError(errorMessage, '验证邀请码时发生错误，请重试');
                return;
              }

              const inviteValidationData = await inviteValidationResponse.json();

              if (!inviteValidationData.valid) {
                showError(errorMessage, inviteValidationData.error || '邀请码无效或已过期');
                return;
              }

              // 邀请码验证通过，开始注册
              // 检查 authManager 是否存在 signUp 方法
              const authManager = (window as any).authManager;
              if (typeof window !== 'undefined' && authManager && typeof authManager.signUp === 'function') {
                const result = await authManager.signUp(email, password);

                if (result.success && result.user) {
                  // 注册成功，标记邀请码为已使用
                  try {
                    await fetch('/api/auth/use-invitation', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({
                        code: inviteCode,
                        userId: result.user.id
                      }),
                    });
                  } catch (useError) {
                    console.warn('标记邀请码使用状态失败:', useError);
                    // 不阻止注册流程，只记录警告
                  }

                  // 显示成功消息
                  const statusIndicator = (window as any).authStatusIndicator;
                  if (statusIndicator) {
                    statusIndicator.showCustomMessage('注册成功！请检查邮箱确认', 'success');
                  }

                  // 跳转到成功页面
                  setTimeout(() => {
                    window.location.href = '/auth/sign-up-success';
                  }, 1000);
                } else {
                  showError(errorMessage, result.error || '注册失败，请重试');
                }
              } else {
                showError(errorMessage, '认证系统不可用，请刷新页面重试');
              }
            } catch (error) {
              console.error('注册错误:', error);
              showError(errorMessage, '注册失败，请重试');
            } finally {
              // 恢复按钮状态
              signupButton.disabled = false;
              signupButton.textContent = '注册';
            }
          });

          // 邀请码输入框格式化
          inviteCodeInput.addEventListener('input', (e: Event) => {
            const target = e.target as HTMLInputElement;
            let value = target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
            if (value.length > 8) {
              value = value.substring(0, 8);
            }
            target.value = value;
          });

          // 邀请码实时验证
          let validateTimeout: number | null = null;
          inviteCodeInput.addEventListener('input', (e: Event) => {
            const target = e.target as HTMLInputElement;
            const code = target.value.trim();

            // 清除之前的验证定时器
            if (validateTimeout) {
              clearTimeout(validateTimeout);
            }

            // 如果邀请码长度为8位，延迟验证
            if (code.length === 8) {
              validateTimeout = window.setTimeout(async () => {
                try {
                  const response = await fetch('/api/auth/validate-invitation', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ code: code }),
                  });

                  if (response.ok) {
                    const data = await response.json();
                    if (data.valid) {
                      target.style.borderColor = '#10b981';
                      target.style.backgroundColor = '#f0fdf4';
                    } else {
                      target.style.borderColor = '#ef4444';
                      target.style.backgroundColor = '#fef2f2';
                    }
                  }
                } catch (error) {
                  console.warn('邀请码验证失败:', error);
                }
              }, 500);
            } else {
              // 重置样式
              target.style.borderColor = '';
              target.style.backgroundColor = '';
            }
          });
        }

        function showError(element: HTMLElement | null, message: string) {
          if (element) {
            element.textContent = message;
            element.classList.remove('hidden');
          }
        }

        function hideError(element: HTMLElement | null) {
          if (element) {
            element.classList.add('hidden');
          }
        }
      }
    }, 500); // 等待认证管理器加载
  });
</script>