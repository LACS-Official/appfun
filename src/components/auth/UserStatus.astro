---
/**
 * 用户状态组件
 * 显示用户登录状态和相关操作
 */

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div id="user-status" class={`flex items-center space-x-2 ${className}`}>
  <!-- 未登录状态 -->
  <div id="user-not-logged-in" class="flex items-center space-x-2" data-require-logout>
    <button
      type="button"
      class="text-gray-700 hover:text-primary-600 px-3 py-2 text-sm font-medium transition-colors"
      id="login-btn"
      data-login-button
    >
      登录
    </button>
  </div>

  <!-- 已登录状态 -->
  <div id="user-logged-in" class="hidden flex items-center space-x-2" data-user-menu data-require-login>
    <!-- 用户头像 -->
    <div class="relative">
      <button
        type="button"
        class="flex items-center space-x-2 text-gray-700 hover:text-primary-600 transition-colors"
        id="user-menu-btn"
        aria-expanded="false"
      >
        <div class="w-8 h-8 rounded-full bg-primary-100 flex items-center justify-center">
          <img
            id="user-avatar"
            class="w-8 h-8 rounded-full hidden"
            alt="用户头像"
            data-user-avatar
          />
          <svg id="default-avatar" class="w-5 h-5 text-primary-600" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <span id="user-name" class="text-sm font-medium hidden md:block" data-user-name>用户</span>
        <svg class="w-4 h-4 hidden md:block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>

      <!-- 用户菜单下拉 -->
      <div
        id="user-menu"
        class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 hidden"
      >
        <div class="px-4 py-2 text-xs text-gray-500 border-b border-gray-100">
          <div data-user-email class="truncate"></div>
          <div data-user-id class="text-gray-400"></div>
        </div>
        <a href="/auth/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" id="profile-link">
          个人资料
        </a>
        <a href="/auth/setup" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" id="settings-link">
          认证设置
        </a>
        <div class="border-t border-gray-100"></div>
        <button
          type="button"
          class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          id="logout-btn"
          data-logout-button
        >
          退出登录
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import { supabaseAuthManager as authManager } from '../../lib/supabase-auth';
  import { appConfig } from '../../lib/config';

  class UserStatusComponent {
    private notLoggedInEl: HTMLElement | null = null;
    private loggedInEl: HTMLElement | null = null;
    private userNameEl: HTMLElement | null = null;
    private userAvatarEl: HTMLImageElement | null = null;
    private defaultAvatarEl: HTMLElement | null = null;
    private userMenuEl: HTMLElement | null = null;
    private userMenuBtnEl: HTMLElement | null = null;
    private isInitialized = false;

    constructor() {
      this.init();
    }

    private init(): void {
      if (this.isInitialized) return;

      document.addEventListener('DOMContentLoaded', () => {
        this.setupElements();
        this.bindEvents();
        this.updateUserStatus();
        this.isInitialized = true;
      });
    }

    private setupElements(): void {
      this.notLoggedInEl = document.getElementById('user-not-logged-in');
      this.loggedInEl = document.getElementById('user-logged-in');
      this.userNameEl = document.getElementById('user-name');
      this.userAvatarEl = document.getElementById('user-avatar') as HTMLImageElement;
      this.defaultAvatarEl = document.getElementById('default-avatar');
      this.userMenuEl = document.getElementById('user-menu');
      this.userMenuBtnEl = document.getElementById('user-menu-btn');
    }

    private bindEvents(): void {
      // 登录按钮
      const loginBtn = document.getElementById('login-btn');
      if (loginBtn) {
        loginBtn.addEventListener('click', () => this.handleLogin());
      }

      // 退出登录按钮
      const logoutBtn = document.getElementById('logout-btn');
      if (logoutBtn) {
        logoutBtn.addEventListener('click', () => this.handleLogout());
      }

      // 用户菜单切换
      if (this.userMenuBtnEl) {
        this.userMenuBtnEl.addEventListener('click', () => this.toggleUserMenu());
      }

      // 点击外部关闭菜单
      document.addEventListener('click', (e) => {
        if (this.userMenuEl && !this.userMenuEl.contains(e.target as Node) && 
            this.userMenuBtnEl && !this.userMenuBtnEl.contains(e.target as Node)) {
          this.closeUserMenu();
        }
      });

      // 监听认证状态变化
      authManager.addListener(() => {
        this.updateUserStatus();
      });

      // 监听自定义事件
      window.addEventListener('userLogin', () => {
        this.updateUserStatus();
      });

      window.addEventListener('userLogout', () => {
        this.updateUserStatus();
      });

      window.addEventListener('userInfoUpdate', () => {
        this.updateUserStatus();
      });
    }

    private updateUserStatus(): void {
      const user = authManager.getCurrentUser();
      
      if (user && user.isLoggedIn) {
        this.showLoggedInState(user);
      } else {
        this.showNotLoggedInState();
      }
    }

    private showLoggedInState(user: any): void {
      if (this.notLoggedInEl) {
        this.notLoggedInEl.classList.add('hidden');
      }
      
      if (this.loggedInEl) {
        this.loggedInEl.classList.remove('hidden');
        this.loggedInEl.classList.add('flex');
      }

      // 更新用户名
      if (this.userNameEl) {
        this.userNameEl.textContent = user.username || '用户';
      }

      // 更新头像
      if (user.avatar && this.userAvatarEl) {
        this.userAvatarEl.src = user.avatar;
        this.userAvatarEl.classList.remove('hidden');
        if (this.defaultAvatarEl) {
          this.defaultAvatarEl.classList.add('hidden');
        }
      } else {
        if (this.userAvatarEl) {
          this.userAvatarEl.classList.add('hidden');
        }
        if (this.defaultAvatarEl) {
          this.defaultAvatarEl.classList.remove('hidden');
        }
      }
    }

    private showNotLoggedInState(): void {
      if (this.loggedInEl) {
        this.loggedInEl.classList.add('hidden');
        this.loggedInEl.classList.remove('flex');
      }
      
      if (this.notLoggedInEl) {
        this.notLoggedInEl.classList.remove('hidden');
      }

      this.closeUserMenu();
    }

    private handleLogin(): void {
      // 直接跳转到登录页面，不传递重定向参数
      window.location.href = '/auth/login';
    }

    private async handleLogout(): Promise<void> {
      try {
        const result = await authManager.signOut();
        if (result.success) {
          if (window.showToast) {
            window.showToast('已退出登录', 'info');
          }
        } else {
          if (window.showToast) {
            window.showToast(result.error || '退出登录失败', 'error');
          }
        }
      } catch (error) {
        console.error('退出登录失败:', error);
        if (window.showToast) {
          window.showToast('退出登录失败', 'error');
        }
      }

      this.closeUserMenu();
    }

    private toggleUserMenu(): void {
      if (!this.userMenuEl || !this.userMenuBtnEl) return;

      const isExpanded = this.userMenuBtnEl.getAttribute('aria-expanded') === 'true';
      
      if (isExpanded) {
        this.closeUserMenu();
      } else {
        this.openUserMenu();
      }
    }

    private openUserMenu(): void {
      if (!this.userMenuEl || !this.userMenuBtnEl) return;

      this.userMenuEl.classList.remove('hidden');
      this.userMenuBtnEl.setAttribute('aria-expanded', 'true');
    }

    private closeUserMenu(): void {
      if (!this.userMenuEl || !this.userMenuBtnEl) return;

      this.userMenuEl.classList.add('hidden');
      this.userMenuBtnEl.setAttribute('aria-expanded', 'false');
    }
  }

  // 创建组件实例
  new UserStatusComponent();
</script>

<style>
  .text-primary-600 {
    color: var(--color-primary-600, #2563eb);
  }
  
  .hover\:text-primary-600:hover {
    color: var(--color-primary-600, #2563eb);
  }
  
  .bg-primary-100 {
    background-color: var(--color-primary-100, #dbeafe);
  }
</style>
