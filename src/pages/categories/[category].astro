---
import Layout from '../../layouts/Layout.astro';
import LoadingSpinner from '../../components/ui/LoadingSpinner.astro';
import { softwareCategories } from '../../lib/config';
// 为静态生成提供路径
export async function getStaticPaths() {
  const categories = softwareCategories.map(category => ({
    params: { category: category.id },
    props: { categoryInfo: category }
  }));
  
  return categories;
}

const { category } = Astro.params as { category: string };
const { categoryInfo } = Astro.props as { categoryInfo?: { id: string; name: string; icon: string; description: string; } | undefined };

// 确保categoryInfo有默认值
const categoryData = categoryInfo || {
  id: category,
  name: category.charAt(0).toUpperCase() + category.slice(1),
  icon: '📦',
  description: `${category}相关软件`
} as {
  id: string;
  name: string;
  icon: string;
  description: string;
};

// 如果没有找到分类信息，则重定向到分类页面
if (!categoryInfo) {
  return Astro.redirect('/categories');
}

// SEO元数据
const title = `${categoryData.name} - APPFUN`;
const description = `在APPFUN上发现和下载${categoryData.name}，${categoryData.description || `浏览最受欢迎的${categoryData.name}，找到最适合您需求的工具`}`;
const keywords = [
  categoryData.name,
  `${categoryData.name}下载`,
  `${categoryData.name}软件`,
  `${categoryData.name}免费`,
  `${categoryData.name}工具`,
  'APPFUN',
  '软件下载',
  '免费软件'
].join(','); // 将数组转换为逗号分隔的字符串
const canonical = `https://appweb.lacs.cc/categories/${categoryData.id}`;

// 结构化数据
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": title,
  "description": description,
  "url": canonical,
  "mainEntity": {
    "@type": "ItemList",
    "name": `${categoryData.name}软件列表`,
    "description": description,
    "numberOfItems": 12
  }
};
---

<Layout 
  title={title} 
  description={description} 
  keywords={keywords}
  canonical={canonical}
  structuredDataType="website"
  structuredData={structuredData}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- 分类标题 -->
    <div class="mb-8">
      <nav class="flex items-center space-x-2 text-sm text-gray-500 mb-4">
        <a href="/" class="hover:text-gray-700">首页</a>
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
        </svg>
        <a href="/categories" class="hover:text-gray-700">分类</a>
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
        </svg>
        <span class="text-gray-900">{categoryData.name}</span>
      </nav>
      
      <div class="flex items-center space-x-4">
        <div class="text-4xl">{categoryData.icon}</div>
        <div>
          <h1 class="text-3xl font-bold text-gray-900">{categoryData.name}</h1>
          <p class="text-gray-600 mt-1">发现优质的{categoryData.name}</p>
        </div>
      </div>
    </div>

    <!-- 筛选和排序 -->
    <div class="bg-white rounded-lg border border-gray-200 p-4 mb-6">
      <div class="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
        <!-- 搜索框 -->
        <div class="flex-1 max-w-md">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            <input
              type="text"
              placeholder={`搜索${categoryData.name}...`}
              class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
              id="category-search"
            />
          </div>
        </div>

        <!-- 排序选择 -->
        <div class="flex items-center space-x-4">
          <label for="sort-select" class="text-sm font-medium text-gray-700">排序:</label>
          <select id="sort-select" class="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
            <option value="updatedAt-desc">最近更新</option>
            <option value="name-asc">名称 A-Z</option>
            <option value="name-desc">名称 Z-A</option>
            <option value="createdAt-desc">最新添加</option>
          </select>
        </div>
      </div>
    </div>

    <!-- 软件统计 -->
    <div class="mb-6">
      <div class="flex items-center space-x-4 text-sm text-gray-600">
        <span id="software-count">正在加载...</span>
        <span>•</span>
        <span>分类: {categoryData.name}</span>
      </div>
    </div>

    <!-- 软件列表 -->
    <div id="software-container">
      <div class="flex justify-center py-12">
        <LoadingSpinner size="lg" text={`正在加载${categoryData.name}...`} />
      </div>
    </div>

    <!-- 分页 -->
    <div id="pagination-container" class="mt-8"></div>
  </div>
</Layout>

<script define:vars={{ category, categoryData }} is:inline>
  import { initializeApiClient, getApiClient } from '../../lib/api';
  import { apiConfig } from '../../lib/config';

  // 初始化 API 客户端
  initializeApiClient(apiConfig);

  let currentPage = 1;
  let currentSort = 'updatedAt-desc';
  let currentSearch = '';
  const pageSize = 12;

  document.addEventListener('DOMContentLoaded', () => {
    loadSoftware();
    setupEventListeners();
  });

  // 设置事件监听器
  function setupEventListeners() {
    // 搜索框
    const searchInput = document.getElementById('category-search');
    if (searchInput) {
      let searchTimeout;
      searchInput.addEventListener('input', (e) => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          currentSearch = e.target.value.trim();
          currentPage = 1;
          loadSoftware();
        }, 300);
      });
    }

    // 排序选择
    const sortSelect = document.getElementById('sort-select');
    if (sortSelect) {
      sortSelect.addEventListener('change', (e) => {
        currentSort = e.target.value;
        currentPage = 1;
        loadSoftware();
      });
    }
  }

  // 加载软件列表
  async function loadSoftware() {
    const container = document.getElementById('software-container');
    const countElement = document.getElementById('software-count');
    if (!container) return;

    // 显示加载状态
    container.innerHTML = `
      <div class="flex justify-center py-12">
        <div class="flex items-center space-x-2">
          <div class="animate-spin w-6 h-6 border-2 border-primary-600 border-t-transparent rounded-full"></div>
          <span class="text-gray-600">正在加载${categoryData.name}...</span>
        </div>
      </div>
    `;

    try {
      const api = getApiClient();
      const [sortBy, sortOrder] = currentSort.split('-');
      
      const params = {
        category: category,
        page: currentPage,
        limit: pageSize,
        sortBy,
        sortOrder,
        ...(currentSearch && { search: currentSearch })
      };

      const response = await api.getSoftwareList(params);

      if (response.success && response.data) {
        const softwareList = response.data;
        const pagination = response.pagination;

        // 更新统计信息
        if (countElement) {
          countElement.textContent = `共找到 ${pagination.total} 个软件`;
        }

        if (softwareList.length === 0) {
          container.innerHTML = `
            <div class="text-center py-12">
              <div class="text-6xl mb-4">📦</div>
              <h3 class="text-lg font-medium text-gray-900 mb-2">暂无软件</h3>
              <p class="text-gray-500">
                ${currentSearch ? `没有找到包含 "${currentSearch}" 的软件` : `${categoryData.name} 分类下暂无软件`}
              </p>
            </div>
          `;
          document.getElementById('pagination-container').innerHTML = '';
          return;
        }

        // 渲染软件列表
        container.innerHTML = `
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            ${softwareList.map(software => `
              <div class="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200 cursor-pointer" onclick="window.location.href='/software/${software.id}'">
                <div class="p-6">
                  <div class="flex items-start justify-between mb-3">
                    <div class="flex-1 min-w-0">
                      <h3 class="text-lg font-semibold text-gray-900 truncate hover:text-primary-600 transition-colors">
                        ${software.name}
                      </h3>
                      ${software.nameEn ? `<p class="text-sm text-gray-500 truncate mt-1">${software.nameEn}</p>` : ''}
                    </div>
                    <div class="flex flex-col items-end space-y-1 ml-4">
                      <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-primary-100 text-primary-800">
                        v${software.currentVersion}
                      </span>
                    </div>
                  </div>
                  ${software.description ? `
                    <p class="text-gray-600 text-sm mb-4 line-clamp-2">
                      ${software.description}
                    </p>
                  ` : ''}
                  ${software.tags && software.tags.length > 0 ? `
                    <div class="flex flex-wrap gap-1 mb-4">
                      ${software.tags.slice(0, 3).map(tag => `
                        <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-blue-100 text-blue-800">
                          ${tag}
                        </span>
                      `).join('')}
                      ${software.tags.length > 3 ? `
                        <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-gray-100 text-gray-800">
                          +${software.tags.length - 3}
                        </span>
                      ` : ''}
                    </div>
                  ` : ''}
                  <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-2">
                      ${software.officialWebsite ? `
                        <a 
                          href="${software.officialWebsite}"
                          target="_blank"
                          rel="noopener noreferrer"
                          class="text-gray-400 hover:text-gray-600 transition-colors"
                          title="官方网站"
                          onclick="event.stopPropagation()"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                          </svg>
                        </a>
                      ` : ''}
                    </div>
                    ${software.latestDownloadUrl ? `
                      <a href="${software.latestDownloadUrl}" target="_blank" rel="noopener noreferrer" class="btn btn-primary btn-sm" onclick="event.stopPropagation()">
                        下载
                      </a>
                    ` : ''}
                  </div>
                </div>
              </div>
            `).join('')}
          </div>
        `;

        // 渲染分页
        renderPagination(pagination);
      }
    } catch (error) {
      console.error('加载软件列表失败:', error);
      container.innerHTML = `
        <div class="text-center py-12">
          <div class="text-red-500 text-6xl mb-4">⚠️</div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">加载失败</h3>
          <p class="text-gray-500 mb-4">无法加载软件列表，请稍后重试</p>
          <button onclick="loadSoftware()" class="btn btn-primary">
            重新加载
          </button>
        </div>
      `;
      
      if (countElement) {
        countElement.textContent = '加载失败';
      }
    }
  }

  // 渲染分页
  function renderPagination(pagination) {
    const container = document.getElementById('pagination-container');
    if (!container || pagination.totalPages <= 1) {
      container.innerHTML = '';
      return;
    }

    const { page, totalPages, total } = pagination;
    const startItem = (page - 1) * pageSize + 1;
    const endItem = Math.min(page * pageSize, total);

    container.innerHTML = `
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-700">
          显示第 <span class="font-medium">${startItem}</span> 到 
          <span class="font-medium">${endItem}</span> 项，共 
          <span class="font-medium">${total}</span> 项
        </div>
        <nav class="flex items-center space-x-1">
          <button 
            onclick="changePage(${page - 1})" 
            ${page === 1 ? 'disabled' : ''}
            class="relative inline-flex items-center px-2 py-2 text-sm font-medium rounded-md border border-gray-300 bg-white text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            上一页
          </button>
          ${generatePageNumbers(page, totalPages)}
          <button 
            onclick="changePage(${page + 1})" 
            ${page === totalPages ? 'disabled' : ''}
            class="relative inline-flex items-center px-2 py-2 text-sm font-medium rounded-md border border-gray-300 bg-white text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            下一页
          </button>
        </nav>
      </div>
    `;
  }

  // 生成页码按钮
  function generatePageNumbers(currentPage, totalPages) {
    const pages = [];
    const delta = 2;
    const start = Math.max(1, currentPage - delta);
    const end = Math.min(totalPages, currentPage + delta);

    for (let i = start; i <= end; i++) {
      const isActive = i === currentPage;
      pages.push(`
        <button 
          onclick="changePage(${i})" 
          class="relative inline-flex items-center px-4 py-2 text-sm font-medium rounded-md border ${
    isActive 
      ? 'z-10 bg-primary-50 border-primary-500 text-primary-600' 
      : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
  }"
        >
          ${i}
        </button>
      `);
    }

    return pages.join('');
  }

  // 切换页面
  window.changePage = function(page) {
    currentPage = page;
    loadSoftware();
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
