---
import Layout from '../layouts/Layout.astro';
import SoftwareCard from '../components/software/SoftwareCard.astro';
import LoadingSpinner from '../components/ui/LoadingSpinner.astro';
import Badge from '../components/ui/Badge.astro';

// 从 URL 参数获取搜索查询
const url = new URL(Astro.request.url);
const query = url.searchParams.get('q') || '';
---

<Layout title={query ? `搜索: ${query}` : '搜索软件'} description="搜索和发现软件">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- 搜索标题 -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">搜索软件</h1>
      {query && (
        <p class="text-gray-600 mt-2">搜索结果: "{query}"</p>
      )}
    </div>

    <!-- 搜索框 -->
    <div class="mb-8">
      <div class="max-w-2xl">
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <input
            type="text"
            placeholder="搜索软件名称、分类或标签..."
            class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary-500 focus:border-primary-500 text-lg"
            id="search-input"
            value={query}
          />
        </div>
      </div>
    </div>

    <!-- 筛选选项 -->
    <div class="bg-white rounded-lg border border-gray-200 p-4 mb-6">
      <div class="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
        <!-- 分类筛选 -->
        <div class="flex items-center space-x-4">
          <label for="category-filter" class="text-sm font-medium text-gray-700">分类:</label>
          <select id="category-filter" class="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
            <option value="">所有分类</option>
            <option value="tools">工具软件</option>
            <option value="development">开发工具</option>
            <option value="design">设计软件</option>
            <option value="multimedia">多媒体</option>
            <option value="productivity">办公软件</option>
            <option value="games">游戏娱乐</option>
            <option value="security">安全软件</option>
            <option value="system">系统工具</option>
            <option value="education">教育学习</option>
            <option value="communication">通讯社交</option>
          </select>
        </div>

        <!-- 排序选择 -->
        <div class="flex items-center space-x-4">
          <label for="sort-select" class="text-sm font-medium text-gray-700">排序:</label>
          <select id="sort-select" class="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
            <option value="relevance">相关性</option>
            <option value="updatedAt-desc">最近更新</option>
            <option value="name-asc">名称 A-Z</option>
            <option value="name-desc">名称 Z-A</option>
            <option value="createdAt-desc">最新添加</option>
          </select>
        </div>
      </div>
    </div>

    <!-- 搜索结果统计 -->
    <div class="mb-6">
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-600">
          <span id="search-count">正在搜索...</span>
        </div>
        
        <!-- 搜索建议标签 -->
        <div id="suggested-tags" class="flex flex-wrap gap-2" style="display: none;">
          <span class="text-sm text-gray-500">相关标签:</span>
        </div>
      </div>
    </div>

    <!-- 搜索结果 -->
    <div id="search-results-container">
      {query ? (
        <div class="flex justify-center py-12">
          <LoadingSpinner size="lg" text="正在搜索..." />
        </div>
      ) : (
        <div class="text-center py-12">
          <div class="text-6xl mb-4">🔍</div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">开始搜索</h3>
          <p class="text-gray-500">输入关键词搜索软件</p>
        </div>
      )}
    </div>

    <!-- 分页 -->
    <div id="pagination-container" class="mt-8"></div>

    <!-- 搜索历史 -->
    <section class="mt-16" id="search-history-section">
      <h2 class="text-2xl font-bold text-gray-900 mb-6">搜索历史</h2>
      <div id="search-history-container">
        <p class="text-gray-500 text-center py-8">暂无搜索历史</p>
      </div>
    </section>

    <!-- 热门搜索 -->
    <section class="mt-16">
      <h2 class="text-2xl font-bold text-gray-900 mb-6">热门搜索</h2>
      <div id="popular-searches-container">
        <div class="flex justify-center py-8">
          <LoadingSpinner size="md" text="加载热门搜索..." />
        </div>
      </div>
    </section>
  </div>
</Layout>

<script define:vars={{ query }}>
  import { initializeApiClient, getApiClient } from '../lib/api';
  import { apiConfig } from '../lib/config';
  import { throttle } from '../lib/utils';

  // 初始化 API 客户端
  initializeApiClient(apiConfig);

  let currentPage = 1;
  let currentSort = 'relevance';
  let currentCategory = '';
  let currentQuery = query || '';
  const pageSize = 12;

  document.addEventListener('DOMContentLoaded', () => {
    setupEventListeners();
    loadSearchHistory();
    loadPopularSearches();
    
    if (currentQuery) {
      performSearch();
    }
  });

  // 设置事件监听器
  function setupEventListeners() {
    // 搜索框
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
      const debouncedSearch = throttle(() => {
        const newQuery = searchInput.value.trim();
        if (newQuery !== currentQuery) {
          currentQuery = newQuery;
          currentPage = 1;
          updateURL();
          if (newQuery) {
            performSearch();
            saveSearchHistory(newQuery);
          } else {
            clearResults();
          }
        }
      }, 300);

      searchInput.addEventListener('input', debouncedSearch);
      
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          const newQuery = searchInput.value.trim();
          if (newQuery) {
            currentQuery = newQuery;
            currentPage = 1;
            updateURL();
            performSearch();
            saveSearchHistory(newQuery);
          }
        }
      });
    }

    // 分类筛选
    const categoryFilter = document.getElementById('category-filter');
    if (categoryFilter) {
      categoryFilter.addEventListener('change', (e) => {
        currentCategory = e.target.value;
        currentPage = 1;
        if (currentQuery) {
          performSearch();
        }
      });
    }

    // 排序选择
    const sortSelect = document.getElementById('sort-select');
    if (sortSelect) {
      sortSelect.addEventListener('change', (e) => {
        currentSort = e.target.value;
        currentPage = 1;
        if (currentQuery) {
          performSearch();
        }
      });
    }
  }

  // 执行搜索
  async function performSearch() {
    const container = document.getElementById('search-results-container');
    const countElement = document.getElementById('search-count');
    if (!container) return;

    // 显示加载状态
    container.innerHTML = `
      <div class="flex justify-center py-12">
        <div class="flex items-center space-x-2">
          <div class="animate-spin w-6 h-6 border-2 border-primary-600 border-t-transparent rounded-full"></div>
          <span class="text-gray-600">正在搜索...</span>
        </div>
      </div>
    `;

    try {
      const api = getApiClient();
      const params = {
        search: currentQuery,
        page: currentPage,
        limit: pageSize,
        ...(currentCategory && { category: currentCategory })
      };

      // 处理排序
      if (currentSort !== 'relevance') {
        const [sortBy, sortOrder] = currentSort.split('-');
        params.sortBy = sortBy;
        params.sortOrder = sortOrder;
      }

      const response = await api.getSoftwareList(params);

      if (response.success && response.data) {
        const softwareList = response.data;
        const pagination = response.pagination;

        // 更新统计信息
        if (countElement) {
          countElement.textContent = `找到 ${pagination.total} 个相关软件`;
        }

        if (softwareList.length === 0) {
          container.innerHTML = `
            <div class="text-center py-12">
              <div class="text-6xl mb-4">😔</div>
              <h3 class="text-lg font-medium text-gray-900 mb-2">未找到相关软件</h3>
              <p class="text-gray-500 mb-4">
                没有找到包含 "${currentQuery}" 的软件，请尝试其他关键词
              </p>
              <div class="space-x-4">
                <button onclick="clearSearch()" class="btn btn-outline">
                  清空搜索
                </button>
                <a href="/categories" class="btn btn-primary">
                  浏览分类
                </a>
              </div>
            </div>
          `;
          document.getElementById('pagination-container').innerHTML = '';
          return;
        }

        // 渲染搜索结果
        container.innerHTML = `
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            ${softwareList.map(software => `
              <div class="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200">
                <div class="p-6">
                  <div class="flex items-start justify-between mb-3">
                    <div class="flex-1 min-w-0">
                      <h3 class="text-lg font-semibold text-gray-900 truncate">
                        <a href="/software/${software.id}" class="hover:text-primary-600 transition-colors">
                          ${highlightSearchTerm(software.name, currentQuery)}
                        </a>
                      </h3>
                      ${software.nameEn ? `<p class="text-sm text-gray-500 truncate mt-1">${highlightSearchTerm(software.nameEn, currentQuery)}</p>` : ''}
                    </div>
                    <div class="flex flex-col items-end space-y-1 ml-4">
                      <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-primary-100 text-primary-800">
                        v${software.currentVersion}
                      </span>
                      ${software.category ? `
                        <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-gray-100 text-gray-800">
                          ${software.category}
                        </span>
                      ` : ''}
                    </div>
                  </div>
                  ${software.description ? `
                    <p class="text-gray-600 text-sm mb-4 line-clamp-2">
                      ${highlightSearchTerm(software.description, currentQuery)}
                    </p>
                  ` : ''}
                  ${software.tags && software.tags.length > 0 ? `
                    <div class="flex flex-wrap gap-1 mb-4">
                      ${software.tags.slice(0, 3).map(tag => `
                        <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-blue-100 text-blue-800">
                          ${highlightSearchTerm(tag, currentQuery)}
                        </span>
                      `).join('')}
                      ${software.tags.length > 3 ? `
                        <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-gray-100 text-gray-800">
                          +${software.tags.length - 3}
                        </span>
                      ` : ''}
                    </div>
                  ` : ''}
                  <div class="flex items-center justify-between">
                    <a href="/software/${software.id}" class="btn btn-outline btn-sm">
                      查看详情
                    </a>
                    ${software.latestDownloadUrl ? `
                      <a href="${software.latestDownloadUrl}" target="_blank" rel="noopener noreferrer" class="btn btn-primary btn-sm" data-protected-download="true">
                        下载
                      </a>
                    ` : ''}
                  </div>
                </div>
              </div>
            `).join('')}
          </div>
        `;

        // 渲染分页
        renderPagination(pagination);
        
        // 加载相关标签建议
        loadSuggestedTags(softwareList);
      }
    } catch (error) {
      console.error('搜索失败:', error);
      container.innerHTML = `
        <div class="text-center py-12">
          <div class="text-red-500 text-6xl mb-4">⚠️</div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">搜索失败</h3>
          <p class="text-gray-500 mb-4">搜索时发生错误，请稍后重试</p>
          <button onclick="performSearch()" class="btn btn-primary">
            重新搜索
          </button>
        </div>
      `;
      
      if (countElement) {
        countElement.textContent = '搜索失败';
      }
    }
  }

  // 高亮搜索词
  function highlightSearchTerm(text, searchTerm) {
    if (!searchTerm || !text) return text;
    
    const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    return text.replace(regex, '<mark class="bg-yellow-200 px-1 rounded">$1</mark>');
  }

  // 加载建议标签
  function loadSuggestedTags(softwareList) {
    const container = document.getElementById('suggested-tags');
    if (!container || !softwareList.length) return;

    const allTags = new Set();
    softwareList.forEach(software => {
      if (software.tags && Array.isArray(software.tags)) {
        software.tags.forEach(tag => allTags.add(tag));
      }
    });

    const tags = Array.from(allTags).slice(0, 5);
    if (tags.length > 0) {
      container.style.display = 'flex';
      container.innerHTML = `
        <span class="text-sm text-gray-500">相关标签:</span>
        ${tags.map(tag => `
          <button onclick="searchByTag('${tag}')" class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors">
            ${tag}
          </button>
        `).join('')}
      `;
    }
  }

  // 渲染分页
  function renderPagination(pagination) {
    const container = document.getElementById('pagination-container');
    if (!container || pagination.totalPages <= 1) {
      container.innerHTML = '';
      return;
    }

    const { page, totalPages, total } = pagination;
    const startItem = (page - 1) * pageSize + 1;
    const endItem = Math.min(page * pageSize, total);

    container.innerHTML = `
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-700">
          显示第 <span class="font-medium">${startItem}</span> 到 
          <span class="font-medium">${endItem}</span> 项，共 
          <span class="font-medium">${total}</span> 项
        </div>
        <nav class="flex items-center space-x-1">
          <button 
            onclick="changePage(${page - 1})" 
            ${page === 1 ? 'disabled' : ''}
            class="relative inline-flex items-center px-2 py-2 text-sm font-medium rounded-md border border-gray-300 bg-white text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            上一页
          </button>
          ${generatePageNumbers(page, totalPages)}
          <button 
            onclick="changePage(${page + 1})" 
            ${page === totalPages ? 'disabled' : ''}
            class="relative inline-flex items-center px-2 py-2 text-sm font-medium rounded-md border border-gray-300 bg-white text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            下一页
          </button>
        </nav>
      </div>
    `;
  }

  // 生成页码按钮
  function generatePageNumbers(currentPage, totalPages) {
    const pages = [];
    const delta = 2;
    const start = Math.max(1, currentPage - delta);
    const end = Math.min(totalPages, currentPage + delta);

    for (let i = start; i <= end; i++) {
      const isActive = i === currentPage;
      pages.push(`
        <button 
          onclick="changePage(${i})" 
          class="relative inline-flex items-center px-4 py-2 text-sm font-medium rounded-md border ${
            isActive 
              ? 'z-10 bg-primary-50 border-primary-500 text-primary-600' 
              : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
          }"
        >
          ${i}
        </button>
      `);
    }

    return pages.join('');
  }

  // 切换页面
  window.changePage = function(page) {
    currentPage = page;
    performSearch();
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // 按标签搜索
  window.searchByTag = function(tag) {
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
      searchInput.value = tag;
      currentQuery = tag;
      currentPage = 1;
      updateURL();
      performSearch();
      saveSearchHistory(tag);
    }
  };

  // 清空搜索
  window.clearSearch = function() {
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
      searchInput.value = '';
      currentQuery = '';
      updateURL();
      clearResults();
    }
  };

  // 清空结果
  function clearResults() {
    const container = document.getElementById('search-results-container');
    const countElement = document.getElementById('search-count');
    
    if (container) {
      container.innerHTML = `
        <div class="text-center py-12">
          <div class="text-6xl mb-4">🔍</div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">开始搜索</h3>
          <p class="text-gray-500">输入关键词搜索软件</p>
        </div>
      `;
    }
    
    if (countElement) {
      countElement.textContent = '';
    }
    
    document.getElementById('pagination-container').innerHTML = '';
    document.getElementById('suggested-tags').style.display = 'none';
  }

  // 更新 URL
  function updateURL() {
    const url = new URL(window.location);
    if (currentQuery) {
      url.searchParams.set('q', currentQuery);
    } else {
      url.searchParams.delete('q');
    }
    window.history.replaceState({}, '', url);
  }

  // 保存搜索历史
  function saveSearchHistory(query) {
    if (!query.trim()) return;
    
    try {
      const history = JSON.parse(localStorage.getItem('search-history') || '[]');
      const newHistory = [query, ...history.filter(item => item !== query)].slice(0, 10);
      localStorage.setItem('search-history', JSON.stringify(newHistory));
      loadSearchHistory();
    } catch (error) {
      console.error('保存搜索历史失败:', error);
    }
  }

  // 加载搜索历史
  function loadSearchHistory() {
    const container = document.getElementById('search-history-container');
    if (!container) return;

    try {
      const history = JSON.parse(localStorage.getItem('search-history') || '[]');
      
      if (history.length === 0) {
        container.innerHTML = '<p class="text-gray-500 text-center py-8">暂无搜索历史</p>';
        return;
      }

      container.innerHTML = `
        <div class="flex flex-wrap gap-2">
          ${history.map(item => `
            <button onclick="searchByTag('${item}')" class="inline-flex items-center px-3 py-2 rounded-full text-sm font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors">
              ${item}
            </button>
          `).join('')}
          <button onclick="clearSearchHistory()" class="inline-flex items-center px-3 py-2 rounded-full text-sm font-medium text-red-600 hover:bg-red-50 transition-colors">
            清空历史
          </button>
        </div>
      `;
    } catch (error) {
      console.error('加载搜索历史失败:', error);
      container.innerHTML = '<p class="text-red-600 text-center py-8">加载搜索历史失败</p>';
    }
  }

  // 清空搜索历史
  window.clearSearchHistory = function() {
    localStorage.removeItem('search-history');
    loadSearchHistory();
  };

  // 加载热门搜索
  async function loadPopularSearches() {
    const container = document.getElementById('popular-searches-container');
    if (!container) return;

    try {
      const api = getApiClient();
      const response = await api.getSoftwareTags({
        includeCount: true,
        sortBy: 'count',
        sortOrder: 'desc'
      });

      if (response.success && response.data && response.data.tags) {
        const popularTags = response.data.tags.slice(0, 10);
        
        container.innerHTML = `
          <div class="flex flex-wrap gap-3">
            ${popularTags.map(tag => {
              const tagName = typeof tag === 'string' ? tag : tag.name;
              const tagCount = typeof tag === 'object' && tag.count ? tag.count : '';
              
              return `
                <button onclick="searchByTag('${tagName}')" class="inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-primary-50 text-primary-700 hover:bg-primary-100 transition-colors">
                  ${tagName}
                  ${tagCount ? `<span class="ml-2 text-xs bg-primary-200 text-primary-800 px-2 py-0.5 rounded-full">${tagCount}</span>` : ''}
                </button>
              `;
            }).join('')}
          </div>
        `;
      }
    } catch (error) {
      console.error('加载热门搜索失败:', error);
      container.innerHTML = '<p class="text-red-600 text-center py-8">加载失败</p>';
    }
  }

  // 全局函数
  window.performSearch = performSearch;
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  mark {
    background-color: #fef3c7;
    padding: 0 0.25rem;
    border-radius: 0.25rem;
  }
  
  .bg-primary-50 {
    background-color: var(--color-primary-50);
  }
  
  .bg-primary-100 {
    background-color: var(--color-primary-100);
  }
  
  .text-primary-600 {
    color: var(--color-primary-600);
  }
  
  .text-primary-700 {
    color: var(--color-primary-700);
  }
  
  .text-primary-800 {
    color: var(--color-primary-800);
  }
  
  .border-primary-500 {
    border-color: var(--color-primary-500);
  }
  
  .border-primary-600 {
    border-color: var(--color-primary-600);
  }
  
  .hover\:text-primary-600:hover {
    color: var(--color-primary-600);
  }
  
  .hover\:bg-primary-100:hover {
    background-color: var(--color-primary-100);
  }
</style>
