---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="邀请码管理 - APPFUN">
  <div class="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-4xl mx-auto">
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">邀请码管理</h1>
        <p class="text-gray-600">管理和生成邀请码</p>
      </div>
      
      <!-- 生成邀请码 -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-4">生成新邀请码</h2>
        <div class="flex gap-4 items-end">
          <div class="flex-1">
            <label for="ad-watch-id" class="block text-sm font-medium text-gray-700 mb-2">
              广告观看ID（可选）
            </label>
            <input
              type="text"
              id="ad-watch-id"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="输入广告观看ID"
            />
          </div>
          <button
            id="generate-btn"
            class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
          >
            生成邀请码
          </button>
        </div>
        
        <div id="generate-result" class="mt-4 hidden">
          <div class="p-4 bg-green-50 border border-green-200 rounded-md">
            <p class="text-green-800">
              邀请码生成成功：<span id="generated-code" class="font-mono font-bold text-lg"></span>
            </p>
          </div>
        </div>
        
        <div id="generate-error" class="mt-4 hidden">
          <div class="p-4 bg-red-50 border border-red-200 rounded-md">
            <p class="text-red-800" id="generate-error-message"></p>
          </div>
        </div>
      </div>
      
      <!-- 邀请码列表 -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold text-gray-900">邀请码列表</h2>
          <button
            id="refresh-btn"
            class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
          >
            刷新
          </button>
        </div>
        
        <div id="loading" class="text-center py-8">
          <div class="inline-flex items-center">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span class="ml-2 text-gray-600">加载中...</span>
          </div>
        </div>
        
        <div id="invitations-table" class="hidden">
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    邀请码
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    状态
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    创建时间
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    过期时间
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    使用时间
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    使用用户
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    广告ID
                  </th>
                </tr>
              </thead>
              <tbody id="invitations-tbody" class="bg-white divide-y divide-gray-200">
                <!-- 数据将通过 JavaScript 填充 -->
              </tbody>
            </table>
          </div>
        </div>
        
        <div id="no-data" class="hidden text-center py-8 text-gray-500">
          暂无邀请码数据
        </div>
        
        <div id="load-error" class="hidden text-center py-8">
          <div class="text-red-600">
            <p>加载邀请码列表失败</p>
            <button
              id="retry-btn"
              class="mt-2 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              重试
            </button>
          </div>
        </div>
      </div>
      
      <!-- 返回链接 -->
      <div class="mt-8 text-center">
        <a href="/" class="inline-flex items-center text-sm text-blue-600 hover:text-blue-800">
          ← 返回首页
        </a>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const generateBtn = document.getElementById('generate-btn');
    const adWatchIdInput = document.getElementById('ad-watch-id');
    const generateResult = document.getElementById('generate-result');
    const generateError = document.getElementById('generate-error');
    const generatedCode = document.getElementById('generated-code');
    const generateErrorMessage = document.getElementById('generate-error-message');
    const refreshBtn = document.getElementById('refresh-btn');
    const retryBtn = document.getElementById('retry-btn');
    
    const loading = document.getElementById('loading');
    const invitationsTable = document.getElementById('invitations-table');
    const noData = document.getElementById('no-data');
    const loadError = document.getElementById('load-error');
    const invitationsTbody = document.getElementById('invitations-tbody');
    
    // 生成邀请码
    generateBtn.addEventListener('click', async () => {
      generateBtn.disabled = true;
      generateBtn.textContent = '生成中...';
      generateResult.classList.add('hidden');
      generateError.classList.add('hidden');
      
      try {
        const response = await fetch('/api/auth/generate-invitation', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            adWatchId: adWatchIdInput.value.trim() || null,
            apiKey: 'your-secret-api-key' // 在实际环境中应该从安全的地方获取
          }),
        });
        
        const data = await response.json();
        
        if (data.success) {
          generatedCode.textContent = data.code;
          generateResult.classList.remove('hidden');
          adWatchIdInput.value = '';
          
          // 刷新列表
          loadInvitations();
        } else {
          generateErrorMessage.textContent = data.error || '生成邀请码失败';
          generateError.classList.remove('hidden');
        }
      } catch (error) {
        console.error('生成邀请码错误:', error);
        generateErrorMessage.textContent = '网络错误，请重试';
        generateError.classList.remove('hidden');
      } finally {
        generateBtn.disabled = false;
        generateBtn.textContent = '生成邀请码';
      }
    });
    
    // 加载邀请码列表
    async function loadInvitations() {
      loading.classList.remove('hidden');
      invitationsTable.classList.add('hidden');
      noData.classList.add('hidden');
      loadError.classList.add('hidden');
      
      try {
        const response = await fetch('/api/auth/invitations');
        
        if (!response.ok) {
          throw new Error('加载失败');
        }
        
        const data = await response.json();
        
        if (data.success && data.invitations && data.invitations.length > 0) {
          renderInvitations(data.invitations);
          invitationsTable.classList.remove('hidden');
        } else {
          noData.classList.remove('hidden');
        }
      } catch (error) {
        console.error('加载邀请码列表错误:', error);
        loadError.classList.remove('hidden');
      } finally {
        loading.classList.add('hidden');
      }
    }
    
    // 渲染邀请码列表
    function renderInvitations(invitations) {
      invitationsTbody.innerHTML = '';
      
      invitations.forEach(invitation => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="font-mono text-sm font-medium text-gray-900">${invitation.code}</span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(invitation)}">
              ${getStatusText(invitation)}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${formatDate(invitation.created_at)}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${formatDate(invitation.expires_at)}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${invitation.used_at ? formatDate(invitation.used_at) : '-'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${invitation.used_by_profile_id ? `#${invitation.used_by_profile_id}` : '-'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${invitation.ad_watch_id || '-'}
          </td>
        `;
        invitationsTbody.appendChild(row);
      });
    }
    
    // 获取状态样式
    function getStatusClass(invitation) {
      if (!invitation.is_active) {
        return 'bg-gray-100 text-gray-800';
      }
      if (invitation.used_at) {
        return 'bg-green-100 text-green-800';
      }
      if (new Date(invitation.expires_at) < new Date()) {
        return 'bg-red-100 text-red-800';
      }
      return 'bg-blue-100 text-blue-800';
    }
    
    // 获取状态文本
    function getStatusText(invitation) {
      if (!invitation.is_active) {
        return '已禁用';
      }
      if (invitation.used_at) {
        return '已使用';
      }
      if (new Date(invitation.expires_at) < new Date()) {
        return '已过期';
      }
      return '有效';
    }
    
    // 格式化日期
    function formatDate(dateString) {
      return new Date(dateString).toLocaleString('zh-CN');
    }
    
    // 事件绑定
    refreshBtn.addEventListener('click', loadInvitations);
    retryBtn.addEventListener('click', loadInvitations);
    
    // 初始加载
    loadInvitations();
  });
</script>
</Layout>
