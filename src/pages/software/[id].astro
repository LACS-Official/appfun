---
import Layout from '../../layouts/Layout.astro';
import LoadingSpinner from '../../components/ui/LoadingSpinner.astro';
import { createClient } from '../../lib/supabase/client';
// 为静态生成提供路径
export async function getStaticPaths() {
  try {
    // 从API获取软件列表以获取所有ID
    const response = await fetch('https://api-g.lacs.cc/app/software');
    
    if (!response.ok) {
      throw new Error(`API请求失败: ${response.status}`);
    }
    
    const data = await response.json();
    
    // 检查响应数据格式
    if (!data.success || !data.data || !Array.isArray(data.data.software)) {
      throw new Error('API响应格式不正确');
    }
    
    // 从软件列表中提取ID
    const softwareIds = data.data.software.map((software: { id: number }) => software.id.toString());
    
    // 为每个ID生成路径参数
    return softwareIds.map((id: string) => ({
      params: { id }
    }));
  } catch (error) {
    console.error('获取软件ID列表失败:', error);
    
    // 如果API调用失败，使用备用ID列表确保至少能生成一些页面
    const fallbackIds = ['1', '2', '3'];
    return fallbackIds.map((id: string) => ({
      params: { id }
    }));
  }
}

const { id } = Astro.params;

if (!id || isNaN(Number(id))) {
  return Astro.redirect('/');
}

// SEO 元数据
const title = '软件详情';
const description = '查看软件的详细信息、版本历史和下载链接。在APPFUN上获取最新版本的软件，了解软件功能、大小、更新时间等详细信息';
const keywords = '软件详情,软件下载,软件版本,软件信息,APPFUN';
const canonical = `https://appfun.fun/software/${id}`;
const structuredData = {
  "@context": "https://schema.org",
  "@type": "SoftwareApplication",
  "name": "",
  "description": "",
  "url": canonical,
  "applicationCategory": "",
  "operatingSystem": "",
  "offers": {
    "@type": "Offer",
    "price": "0",
    "priceCurrency": "CNY"
  }
};
---

<Layout 
  title={title} 
  description={description} 
  keywords={keywords}
  canonical={canonical}
  structuredDataType="software"
  structuredData={structuredData}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- 软件信息容器 -->
    <div id="software-container">
      <div class="flex justify-center py-12">
        <LoadingSpinner size="lg" text="正在加载软件信息..." />
      </div>
    </div>

    <!-- 版本历史 -->
    <section class="mt-12" id="versions-section" style="display: none;">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-2xl font-bold text-gray-900">版本历史</h2>
        <div class="flex items-center space-x-4">
          <select id="version-filter" class="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
            <option value="all">所有版本</option>
            <option value="release">正式版</option>
            <option value="beta">测试版</option>
            <option value="alpha">内测版</option>
          </select>
        </div>
      </div>
      
      <div id="versions-container">
        <div class="flex justify-center py-8">
          <LoadingSpinner size="md" text="正在加载版本历史..." />
        </div>
      </div>
    </section>

    <!-- 公告 -->
    <section class="mt-12" id="announcements-section" style="display: none;">
      <h2 class="text-2xl font-bold text-gray-900 mb-6">相关公告</h2>
      <div id="announcements-container">
        <div class="flex justify-center py-8">
          <LoadingSpinner size="md" text="正在加载公告..." />
        </div>
      </div>
    </section>
  </div>
</Layout>

<script define:vars={{ id }} is:inline>
  // 由于这是在浏览器中运行的脚本，我们需要直接定义这些函数而不是导入
  // API 配置
  const apiConfig = {
    baseUrl: 'https://api-g.lacs.cc',
    apiKey: '', // 暂时为空，因为API测试显示不需要API Key
    timeout: 10000,
  };

  // 全局变量，用于跟踪登录状态
  let globalLoginState = false;

  // 工具函数
  function formatDate(date, options = {}) {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    const defaultOptions = {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    };
    return dateObj.toLocaleDateString('zh-CN', { ...defaultOptions, ...options });
  }

  function getPriorityDownloadLink(downloadLinks) {
    if (!downloadLinks) return null;
    const priorities = ['official', 'github', 'quark', 'pan123', 'baidu', 'thunder'];
    for (const priority of priorities) {
      if (downloadLinks[priority]) {
        return downloadLinks[priority];
      }
    }
    if (downloadLinks.backup && downloadLinks.backup.length > 0) {
      return downloadLinks.backup[0];
    }
    return null;
  }

  // API 客户端类
  class ApiClient {
    constructor(config) {
      this.config = {
        timeout: 10000,
        ...config,
      };
    }

    async request(endpoint, options = {}) {
      const url = `${this.config.baseUrl}${endpoint}`;
      const headers = {
        'Content-Type': 'application/json',
        ...options.headers,
      };

      if (this.config.apiKey) {
        headers['X-API-Key'] = this.config.apiKey;
      }

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);

      try {
        const response = await fetch(url, {
          ...options,
          headers,
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        return await response.json();
      } catch (error) {
        clearTimeout(timeoutId);
        if (error.name === 'AbortError') {
          throw new Error('请求超时');
        }
        throw error;
      }
    }

    async get(endpoint, params) {
      const queryString = params ? new URLSearchParams(params).toString() : '';
      const url = queryString ? `${endpoint}?${queryString}` : endpoint;
      return this.request(url);
    }

    async getSoftwareById(id) {
      return this.get(`/app/software/id/${id}`);
    }

    async getSoftwareVersions(softwareId, params) {
      return this.get(`/app/software/id/${softwareId}/versions`, params);
    }

    async getSoftwareAnnouncements(softwareId, params) {
      return this.get(`/app/software/id/${softwareId}/announcements`, params);
    }
  }

  // 初始化全局登录状态检查
  async function checkGlobalLoginStatus() {
    try {
      // 首先检查localStorage中是否有登录状态
      const storedLoginState = localStorage.getItem('isLoggedIn');
      if (storedLoginState !== null) {
        globalLoginState = storedLoginState === 'true';
        // 更新所有下载按钮的状态
        updateAllDownloadButtons();
        return globalLoginState;
      }
      
      // 如果localStorage中没有，尝试从API获取
      const response = await fetch('/api/auth/status', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'same-origin'
      });
      
      if (response.ok) {
        const data = await response.json();
        globalLoginState = !!data.user;
        // 存储到localStorage
        localStorage.setItem('isLoggedIn', globalLoginState.toString());
        // 更新所有下载按钮的状态
        updateAllDownloadButtons();
      } else {
        globalLoginState = false;
        localStorage.setItem('isLoggedIn', 'false');
        // 更新所有下载按钮的状态
        updateAllDownloadButtons();
      }
    } catch (error) {
      console.error('检查全局登录状态失败:', error);
      globalLoginState = false;
      localStorage.setItem('isLoggedIn', 'false');
      // 更新所有下载按钮的状态
      updateAllDownloadButtons();
    }
    return globalLoginState;
  }

  // 更新所有下载按钮的状态
  function updateAllDownloadButtons() {
    const downloadButtons = document.querySelectorAll('[data-download-url]');
    downloadButtons.forEach(button => {
      const downloadText = button.querySelector('.download-text');
      const loginPromptText = button.querySelector('.login-prompt-text');
      
      if (globalLoginState) {
        // 已登录状态 - 显示"立即下载"
        button.classList.remove('bg-orange-500', 'hover:bg-orange-600');
        button.classList.add('bg-blue-600', 'hover:bg-blue-700');
        
        if (downloadText && loginPromptText) {
          downloadText.classList.remove('hidden');
          loginPromptText.classList.add('hidden');
        }
      } else {
        // 未登录状态 - 显示"请登录后下载"
        button.classList.remove('bg-blue-600', 'hover:bg-blue-700');
        button.classList.add('bg-orange-500', 'hover:bg-orange-600');
        
        if (downloadText && loginPromptText) {
          downloadText.classList.add('hidden');
          loginPromptText.classList.remove('hidden');
        }
      }
    });
  }

  // 页面加载时检查登录状态
  checkGlobalLoginStatus();

  // 初始化 API 客户端
  const apiClient = new ApiClient(apiConfig);

  let softwareData = null;
  let currentVersionFilter = 'all';

  document.addEventListener('DOMContentLoaded', () => {
    // 再次检查登录状态
    checkGlobalLoginStatus();
    
    loadSoftwareDetails(id);
    setupEventListeners();
  });

  // 设置事件监听器
  function setupEventListeners() {
    const versionFilter = document.getElementById('version-filter');
    if (versionFilter) {
      versionFilter.addEventListener('change', (e) => {
        currentVersionFilter = e.target.value;
        loadVersions();
      });
    }
  }

  // 加载软件详情
  async function loadSoftwareDetails(id) {
    const container = document.getElementById('software-container');
    if (!container) {
      console.error('软件容器元素未找到');
      return;
    }

    console.log('开始加载软件详情，ID:', id);

    try {
      const response = await apiClient.getSoftwareById(parseInt(id));
      console.log('API响应:', response);

      if (response.success && response.data) {
        softwareData = response.data;
        renderSoftwareDetails(softwareData);
        
        // 显示其他部分
        document.getElementById('versions-section').style.display = 'block';
        document.getElementById('announcements-section').style.display = 'block';
        
        // 加载版本历史和公告
        loadVersions();
        loadAnnouncements();
      } else {
        throw new Error(response.message || '软件不存在');
      }
    } catch (error) {
      console.error('加载软件详情失败:', error);
      container.innerHTML = `
        <div class="text-center py-12">
          <div class="text-red-500 text-6xl mb-4">⚠️</div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">加载失败</h3>
          <p class="text-gray-500 mb-4">${error.message || '无法加载软件信息，请稍后重试'}</p>
          <div class="space-x-4">
            <button onclick="loadSoftwareDetails(id)" class="btn btn-primary">
              重新加载
            </button>
            <a href="/" class="btn btn-outline">
              返回首页
            </a>
          </div>
        </div>
      `;
    }
  }

  // 渲染软件详情
  function renderSoftwareDetails(software) {
    console.log('开始渲染软件详情:', software);
    const container = document.getElementById('software-container');
    if (!container) {
      console.error('软件容器元素未找到');
      return;
    }

    const downloadUrl = software.latestDownloadUrl || getPriorityDownloadLink(software.versions?.[0]?.downloadLinks);
    const systemReqs = software.systemRequirements;
    console.log('下载链接:', downloadUrl);
    console.log('系统要求:', systemReqs);

    container.innerHTML = `
      <!-- 面包屑导航 -->
      <nav class="flex items-center space-x-2 text-sm text-gray-500 mb-6">
        <a href="/" class="hover:text-gray-700">首页</a>
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
        </svg>
        ${software.category ? `
          <a href="/categories/${software.category}" class="hover:text-gray-700">${software.category}</a>
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
          </svg>
        ` : ''}
        <span class="text-gray-900">${software.name}</span>
      </nav>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- 主要信息 -->
        <div class="lg:col-span-2">
          <!-- 软件标题 -->
          <div class="mb-6">
            <div class="flex items-start justify-between mb-4">
              <div>
                <h1 class="text-3xl font-bold text-gray-900 mb-2">${software.name}</h1>
                ${software.nameEn ? `<p class="text-lg text-gray-600">${software.nameEn}</p>` : ''}
              </div>
              <div class="flex flex-col items-end space-y-2">
                <span class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium bg-primary-100 text-primary-800">
                  v${software.currentVersion}
                </span>
                ${software.category ? `
                  <span class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium bg-gray-100 text-gray-800">
                    ${software.category}
                  </span>
                ` : ''}
              </div>
            </div>

            <!-- 标签 -->
            ${software.tags && software.tags.length > 0 ? `
              <div class="flex flex-wrap gap-2 mb-4">
                ${software.tags.map(tag => `
                  <a href="/tags/${encodeURIComponent(tag)}" 
                     class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-blue-100 text-blue-800 hover:bg-blue-200 transition-colors">
                    ${tag}
                  </a>
                `).join('')}
              </div>
            ` : ''}

            <!-- 操作按钮 -->
            <div class="flex items-center space-x-4">
              ${downloadUrl ? `
                <button
                  id="main-download-button"
                  class="btn btn-primary btn-lg bg-orange-500 hover:bg-orange-600"
                  data-download-url="${downloadUrl}"
                  data-show-login-prompt="true"
                  type="button">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                  <span class="download-text hidden">立即下载</span>
                  <span class="login-prompt-text">请登录后下载</span>
                </button>
              ` : ''}
              
              ${software.officialWebsite ? `
                <a href="${software.officialWebsite}" target="_blank" rel="noopener noreferrer" 
                   class="btn btn-outline">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                  官方网站
                </a>
              ` : ''}
            </div>
          </div>

          <!-- 软件描述 -->
          <div class="bg-white rounded-lg border border-gray-200 p-6 mb-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-3">软件介绍</h3>
            <div class="prose prose-sm max-w-none text-gray-600">
              <p>${software.description || '暂无描述'}</p>
              ${software.descriptionEn ? `<p class="mt-3 text-gray-500">${software.descriptionEn}</p>` : ''}
            </div>
          </div>

          <!-- 系统要求 -->
          ${systemReqs ? `
            <div class="bg-white rounded-lg border border-gray-200 p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-3">系统要求</h3>
              <dl class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                ${systemReqs.os ? `
                  <div>
                    <dt class="text-sm font-medium text-gray-500">操作系统</dt>
                    <dd class="mt-1 text-sm text-gray-900">${Array.isArray(systemReqs.os) ? systemReqs.os.join(', ') : systemReqs.os}</dd>
                  </div>
                ` : ''}
                ${systemReqs.memory ? `
                  <div>
                    <dt class="text-sm font-medium text-gray-500">内存要求</dt>
                    <dd class="mt-1 text-sm text-gray-900">${systemReqs.memory}</dd>
                  </div>
                ` : ''}
                ${systemReqs.storage ? `
                  <div>
                    <dt class="text-sm font-medium text-gray-500">存储空间</dt>
                    <dd class="mt-1 text-sm text-gray-900">${systemReqs.storage}</dd>
                  </div>
                ` : ''}
              </dl>
            </div>
          ` : ''}
        </div>

        <!-- 侧边栏信息 -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg border border-gray-200 p-6 sticky top-8">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">软件信息</h3>
            <dl class="space-y-3">
              <div>
                <dt class="text-sm font-medium text-gray-500">当前版本</dt>
                <dd class="mt-1 text-sm text-gray-900">v${software.currentVersion}</dd>
              </div>

              ${software.viewCount !== undefined ? `
                <div>
                  <dt class="text-sm font-medium text-gray-500">浏览量</dt>
                  <dd class="mt-1 text-sm text-gray-900 flex items-center">
                    <svg class="w-4 h-4 mr-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                    ${software.viewCount.toLocaleString()} 次
                  </dd>
                </div>
              ` : ''}

              ${software.rank ? `
                <div>
                  <dt class="text-sm font-medium text-gray-500">热门排名</dt>
                  <dd class="mt-1 text-sm text-gray-900 flex items-center">
                    <svg class="w-4 h-4 mr-1 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                    第 ${software.rank} 名
                  </dd>
                </div>
              ` : ''}

              ${software.filetype ? `
                <div>
                  <dt class="text-sm font-medium text-gray-500">文件格式</dt>
                  <dd class="mt-1 text-sm text-gray-900">${software.filetype.toUpperCase()}</dd>
                </div>
              ` : ''}

              ${software.openname ? `
                <div>
                  <dt class="text-sm font-medium text-gray-500">启动文件</dt>
                  <dd class="mt-1 text-sm text-gray-900 font-mono">${software.openname}</dd>
                </div>
              ` : ''}

              <div>
                <dt class="text-sm font-medium text-gray-500">最后更新</dt>
                <dd class="mt-1 text-sm text-gray-900">${formatDate(software.updatedAt)}</dd>
              </div>

              <div>
                <dt class="text-sm font-medium text-gray-500">添加时间</dt>
                <dd class="mt-1 text-sm text-gray-900">${formatDate(software.createdAt)}</dd>
              </div>
            </dl>
          </div>
        </div>
      </div>
    `;

    // 更新页面标题
    document.title = `${software.name} - APPFUN`;
    
    // 初始化下载按钮
    initializeDownloadButtons();
  }

  // 加载版本历史
  async function loadVersions() {
    const container = document.getElementById('versions-container');
    if (!container || !softwareData) return;

    container.innerHTML = `
      <div class="flex justify-center py-8">
        <div class="animate-spin w-6 h-6 border-2 border-primary-600 border-t-transparent rounded-full"></div>
      </div>
    `;

    try {
      const params = {
        page: 1,
        limit: 10,
        sortBy: 'releaseDate',
        sortOrder: 'desc'
      };

      if (currentVersionFilter !== 'all') {
        params.versionType = currentVersionFilter;
      }

      const response = await apiClient.getSoftwareVersions(softwareData.id, params);

      if (response.success && response.data) {
        const versions = response.data.versions || response.data;
        
        if (versions.length === 0) {
          container.innerHTML = `
            <div class="text-center py-8">
              <p class="text-gray-500">暂无版本历史</p>
            </div>
          `;
          return;
        }

        container.innerHTML = `
          <div class="space-y-4">
            ${versions.map(version => `
              <div class="bg-white rounded-lg border border-gray-200 p-6">
                <div class="flex items-start justify-between mb-3">
                  <div>
                    <h4 class="text-lg font-semibold text-gray-900">v${version.version}</h4>
                    <p class="text-sm text-gray-500">${formatDate(version.releaseDate)}</p>
                  </div>
                  <div class="flex items-center space-x-2">
                    <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${
    version.versionType === 'release' ? 'bg-green-100 text-green-800' :
      version.versionType === 'beta' ? 'bg-yellow-100 text-yellow-800' :
        'bg-red-100 text-red-800'
  }">
                      ${version.versionType === 'release' ? '正式版' : 
      version.versionType === 'beta' ? '测试版' : '内测版'}
                    </span>
                    ${version.isStable ? `
                      <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-blue-100 text-blue-800">
                        稳定版
                      </span>
                    ` : ''}
                  </div>
                </div>
                
                ${version.releaseNotes ? `
                  <div class="mb-4">
                    <h5 class="text-sm font-medium text-gray-700 mb-2">更新内容</h5>
                    <p class="text-sm text-gray-600">${version.releaseNotes}</p>
                  </div>
                ` : ''}
                
              </div>
            `).join('')}
          </div>
        `;
      }
    } catch (error) {
      console.error('加载版本历史失败:', error);
      container.innerHTML = `
        <div class="text-center py-8">
          <p class="text-red-600">加载失败，请稍后重试</p>
        </div>
      `;
    }
  }

  // 加载公告
  async function loadAnnouncements() {
    const container = document.getElementById('announcements-container');
    if (!container || !softwareData) return;

    try {
      const response = await apiClient.getSoftwareAnnouncements(softwareData.id, {
        page: 1,
        limit: 5,
        isPublished: true,
        sortBy: 'publishedAt',
        sortOrder: 'desc'
      });

      if (response.success && response.data) {
        const announcements = response.data.announcements || response.data;
        
        if (announcements.length === 0) {
          container.innerHTML = `
            <div class="text-center py-8">
              <p class="text-gray-500">暂无相关公告</p>
            </div>
          `;
          return;
        }

        container.innerHTML = `
          <div class="space-y-4">
            ${announcements.map(announcement => `
              <div class="bg-white rounded-lg border border-gray-200 p-6">
                <div class="flex items-start justify-between mb-3">
                  <h4 class="text-lg font-semibold text-gray-900">${announcement.title}</h4>
                  <div class="flex items-center space-x-2">
                    <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${
    announcement.type === 'security' ? 'bg-red-100 text-red-800' :
      announcement.type === 'update' ? 'bg-green-100 text-green-800' :
        announcement.type === 'maintenance' ? 'bg-yellow-100 text-yellow-800' :
          'bg-blue-100 text-blue-800'
  }">
                      ${announcement.type === 'security' ? '安全公告' :
      announcement.type === 'update' ? '更新通知' :
        announcement.type === 'maintenance' ? '维护通知' :
          announcement.type === 'feature' ? '功能介绍' :
            announcement.type === 'bugfix' ? '修复通知' : '一般公告'}
                    </span>
                    <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${
    announcement.priority === 'urgent' ? 'bg-red-100 text-red-800' :
      announcement.priority === 'high' ? 'bg-orange-100 text-orange-800' :
        announcement.priority === 'normal' ? 'bg-blue-100 text-blue-800' :
          'bg-gray-100 text-gray-800'
  }">
                      ${announcement.priority === 'urgent' ? '紧急' :
      announcement.priority === 'high' ? '高' :
        announcement.priority === 'normal' ? '普通' : '低'}
                    </span>
                  </div>
                </div>
                
                <p class="text-sm text-gray-600 mb-3">${announcement.content}</p>
                
                <div class="flex items-center justify-between text-xs text-gray-500">
                  <span>${formatDate(announcement.publishedAt)}</span>
                  ${announcement.version ? `<span>版本: v${announcement.version}</span>` : ''}
                </div>
              </div>
            `).join('')}
          </div>
        `;
      }
    } catch (error) {
      console.error('加载公告失败:', error);
      container.innerHTML = `
        <div class="text-center py-8">
          <p class="text-red-600">加载失败，请稍后重试</p>
        </div>
      `;
    }
  }

  // 初始化下载按钮
  function initializeDownloadButtons() {
    // 直接初始化，不再依赖authManager
    initDownloadButtonsWithModules();
    
    // 确保主下载按钮正确初始化
    const mainDownloadButton = document.getElementById('main-download-button');
    if (mainDownloadButton) {
      // 立即检查登录状态并更新按钮
      checkGlobalLoginStatus().then(() => {
        const isLoggedIn = globalLoginState;
        const downloadText = mainDownloadButton.querySelector('.download-text');
        const loginPromptText = mainDownloadButton.querySelector('.login-prompt-text');
        
        if (isLoggedIn) {
          // 已登录状态 - 显示"立即下载"
          mainDownloadButton.classList.remove('bg-orange-500', 'hover:bg-orange-600');
          mainDownloadButton.classList.add('bg-blue-600', 'hover:bg-blue-700');
          
          if (downloadText && loginPromptText) {
            downloadText.classList.remove('hidden');
            loginPromptText.classList.add('hidden');
          }
        } else {
          // 未登录状态 - 显示"请登录后下载"
          mainDownloadButton.classList.remove('bg-blue-600', 'hover:bg-blue-700');
          mainDownloadButton.classList.add('bg-orange-500', 'hover:bg-orange-600');
          
          if (downloadText && loginPromptText) {
            downloadText.classList.add('hidden');
            loginPromptText.classList.remove('hidden');
          }
        }
      });
    }
  }

  function initDownloadButtonsWithModules() {
    // 下载按钮管理器类
    class DownloadButtonManager {
      constructor(button) {
        this.button = button;
        this.downloadUrl = button.dataset.downloadUrl || '';
        this.downloadText = button.querySelector('.download-text');
        this.loginPromptText = button.querySelector('.login-prompt-text');
        this.showLoginPrompt = button.dataset.showLoginPrompt === 'true';
        this.isLoggedIn = false;
        this.softwareData = null; // 存储软件数据

        this.init();
      }

      async init() {
        // 绑定点击事件
        this.button.addEventListener('click', (e) => this.handleClick(e));
        
        // 获取软件数据
        await this.fetchSoftwareData();
        
        // 检查用户登录状态
        await this.checkAuthStatus();
        
        // 监听页面可见性变化，当用户从登录页面返回时更新状态
        document.addEventListener('visibilitychange', () => {
          if (!document.hidden) {
            this.checkAuthStatus();
          }
        });
        
        // 定期检查登录状态（每30秒）
        setInterval(() => {
          this.checkAuthStatus();
        }, 30000);
      }

      async fetchSoftwareData() {
        try {
          const apiClient = new ApiClient(apiConfig);
          const response = await apiClient.getSoftwareById(parseInt(id));
          
          if (response.success && response.data) {
            this.softwareData = response.data;
            
            // 获取最新版本的下载链接
            if (this.softwareData.versions && this.softwareData.versions.length > 0) {
              // 按发布日期排序，获取最新版本
              const sortedVersions = [...this.softwareData.versions].sort((a, b) => 
                new Date(b.releaseDate).getTime() - new Date(a.releaseDate).getTime()
              );
              const latestVersion = sortedVersions[0];
              
              if (latestVersion.downloadLinks) {
                const priorityLink = getPriorityDownloadLink(latestVersion.downloadLinks);
                if (priorityLink) {
                  this.downloadUrl = priorityLink;
                }
              }
            } else if (this.softwareData.latestDownloadUrl) {
              // 如果没有版本列表但有最新下载链接，使用它
              this.downloadUrl = this.softwareData.latestDownloadUrl;
            }
          }
        } catch (error) {
          console.error('获取软件数据失败:', error);
        }
      }

      async checkAuthStatus() {
        try {
          // 使用全局登录状态检查函数
          await checkGlobalLoginStatus();
          this.isLoggedIn = globalLoginState;
          this.updateButtonState();
        } catch (error) {
          console.error('检查登录状态失败:', error);
          this.isLoggedIn = false;
          this.updateButtonState();
        }
      }

      async checkAuthStatusWithFetch() {
        try {
          const response = await fetch('/api/auth/status');
          if (response.ok) {
            const data = await response.json();
            this.isLoggedIn = !!data.user;
          } else {
            this.isLoggedIn = false;
          }
        } catch (error) {
          console.error('检查登录状态失败:', error);
          this.isLoggedIn = false;
        }
      }

      updateButtonState() {
        if (this.showLoginPrompt) {
          // 根据登录状态更新按钮状态
          if (this.isLoggedIn) {
            // 已登录状态 - 显示"立即下载"
            this.button.classList.remove('bg-orange-500', 'hover:bg-orange-600');
            this.button.classList.add('bg-blue-600', 'hover:bg-blue-700');
            
            if (this.downloadText && this.loginPromptText) {
              this.downloadText.classList.remove('hidden');
              this.loginPromptText.classList.add('hidden');
            }
          } else {
            // 未登录状态 - 显示"请登录后下载"
            this.button.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            this.button.classList.add('bg-orange-500', 'hover:bg-orange-600');
            
            if (this.downloadText && this.loginPromptText) {
              this.downloadText.classList.add('hidden');
              this.loginPromptText.classList.remove('hidden');
            }
          }
        } else {
          // 如果不需要登录提示，保持默认状态
          this.button.classList.add('bg-blue-600', 'hover:bg-blue-700');
          
          if (this.downloadText && this.loginPromptText) {
            this.downloadText.classList.remove('hidden');
            this.loginPromptText.classList.add('hidden');
          }
        }
        
        this.button.disabled = false;
      }

      handleClick(event) {
        event.preventDefault();
        
        if (this.showLoginPrompt && !this.isLoggedIn) {
          // 未登录时跳转到登录页面
          window.location.href = '/auth/login';
        } else {
          // 已登录时显示下载弹窗
          this.showDownloadModal();
        }
      }

      showDownloadModal() {
        // 创建弹窗
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4';
        modal.onclick = (e) => {
          if (e.target === modal) {
            modal.remove();
          }
        };
        
        // 弹窗内容
        const modalContent = document.createElement('div');
        modalContent.className = 'bg-white rounded-lg shadow-xl max-w-md w-full p-6';
        
        // 弹窗头部
        const modalHeader = document.createElement('div');
        modalHeader.className = 'flex justify-between items-center mb-4';
        
        const title = document.createElement('h3');
        title.className = 'text-lg font-semibold text-gray-900';
        title.textContent = '下载软件';
        
        const closeButton = document.createElement('button');
        closeButton.className = 'text-gray-500 hover:text-gray-700';
        closeButton.innerHTML = '<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
        closeButton.onclick = () => modal.remove();
        
        modalHeader.appendChild(title);
        modalHeader.appendChild(closeButton);
        
        // 弹窗内容
        const modalBody = document.createElement('div');
        modalBody.className = 'mb-4';
        
        // 软件信息
        if (this.softwareData) {
          const softwareName = document.createElement('h4');
          softwareName.className = 'text-md font-medium text-gray-900 mb-2';
          softwareName.textContent = this.softwareData.name || '软件';
          modalBody.appendChild(softwareName);
          
          // 版本信息
          const versionInfo = document.createElement('p');
          versionInfo.className = 'text-sm text-gray-600 mb-3';
          
          // 获取最新版本信息
          let latestVersion = this.softwareData.currentVersion;
          if (this.softwareData.versions && this.softwareData.versions.length > 0) {
            // 按发布日期排序，获取最新版本
            const sortedVersions = [...this.softwareData.versions].sort((a, b) => 
              new Date(b.releaseDate).getTime() - new Date(a.releaseDate).getTime()
            );
            latestVersion = sortedVersions[0].version;
          }
          
          versionInfo.textContent = `最新版本: v${latestVersion || '未知'}`;
          modalBody.appendChild(versionInfo);
          
          // 更新时间
          if (this.softwareData.updatedAt) {
            const releaseDate = document.createElement('p');
            releaseDate.className = 'text-xs text-gray-500 mb-3';
            releaseDate.textContent = `更新时间: ${formatDate(this.softwareData.updatedAt)}`;
            modalBody.appendChild(releaseDate);
          }
        }
        
        const downloadLabel = document.createElement('p');
        downloadLabel.className = 'text-gray-700 mb-2';
        downloadLabel.textContent = '下载链接:';
        
        const urlDisplay = document.createElement('div');
        urlDisplay.className = 'bg-gray-100 p-3 rounded-md mb-4 break-all text-sm';
        urlDisplay.textContent = this.downloadUrl;
        
        modalBody.appendChild(downloadLabel);
        modalBody.appendChild(urlDisplay);
        
        // 弹窗底部按钮
        const modalFooter = document.createElement('div');
        modalFooter.className = 'flex justify-end gap-3';
        
        const cancelButton = document.createElement('button');
        cancelButton.className = 'px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors';
        cancelButton.textContent = '取消';
        cancelButton.onclick = () => modal.remove();
        
        const downloadButton = document.createElement('button');
        downloadButton.className = 'px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors';
        downloadButton.textContent = '确认下载';
        downloadButton.onclick = () => {
          window.open(this.downloadUrl, '_blank', 'noopener,noreferrer');
          
          // 触发下载事件
          window.dispatchEvent(new CustomEvent('downloadStarted', {
            detail: { url: this.downloadUrl }
          }));
          
          modal.remove();
        };
        
        modalFooter.appendChild(cancelButton);
        modalFooter.appendChild(downloadButton);
        
        // 组装弹窗
        modalContent.appendChild(modalHeader);
        modalContent.appendChild(modalBody);
        modalContent.appendChild(modalFooter);
        modal.appendChild(modalContent);
        
        // 添加到文档
        document.body.appendChild(modal);
      }
    }

    // 初始化所有下载按钮
    const downloadButtons = document.querySelectorAll('[data-download-url]');
    downloadButtons.forEach(button => {
      new DownloadButtonManager(button);
    });

    // 为动态添加的按钮提供初始化函数
    window.initializeDownloadButton = (button) => {
      new DownloadButtonManager(button);
    };
  }

  // 全局函数，供按钮调用
  window.loadSoftwareDetails = (id) => loadSoftwareDetails(id);
</script>

<style>
  .bg-primary-100 {
    background-color: var(--color-primary-100);
  }
  
  .text-primary-800 {
    color: var(--color-primary-800);
  }
  
  .border-primary-600 {
    border-color: var(--color-primary-600);
  }
</style>
