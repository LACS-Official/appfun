---
import Layout from '../layouts/Layout.astro';
import LoadingSpinner from '../components/ui/LoadingSpinner.astro';
import ErrorMessage from '../components/ui/ErrorMessage.astro';
import Badge from '../components/ui/Badge.astro';

// SEO 元数据
const title = '软件排行榜';
const description = '查看APPFUN上最受欢迎的软件排行榜。发现下载量最高、评分最好的热门软件，快速找到优质工具';
const keywords = '软件排行榜,热门软件,软件排名,最受欢迎软件,软件下载排行,APPFUN';
const canonical = 'https://appfun.fun/ranking';
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": title,
  "description": description,
  "url": canonical,
  "mainEntity": {
    "@type": "ItemList",
    "numberOfItems": 0,
    "itemListElement": []
  }
};
---

<Layout 
  title={title} 
  description={description} 
  keywords={keywords}
  canonical={canonical}
  structuredDataType="website"
  structuredData={structuredData}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- 页面标题 -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">🏆 软件排行榜</h1>
      <p class="text-gray-600 mt-2">根据浏览量统计的最受欢迎软件</p>
    </div>

    <!-- 筛选和排序 -->
    <div class="bg-white rounded-lg border border-gray-200 p-6 mb-8">
      <div class="flex flex-col sm:flex-row gap-4">
        <!-- 分类筛选 -->
        <div class="flex-1">
          <label for="category-filter" class="block text-sm font-medium text-gray-700 mb-2">
            分类筛选
          </label>
          <select id="category-filter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500">
            <option value="">全部分类</option>
            <option value="tools">工具软件</option>
            <option value="development">开发工具</option>
            <option value="design">设计软件</option>
            <option value="multimedia">多媒体</option>
            <option value="productivity">办公软件</option>
            <option value="games">游戏娱乐</option>
            <option value="security">安全软件</option>
            <option value="system">系统工具</option>
            <option value="education">教育学习</option>
            <option value="communication">通讯社交</option>
          </select>
        </div>

        <!-- 时间范围 -->
        <div class="flex-1">
          <label for="time-range" class="block text-sm font-medium text-gray-700 mb-2">
            时间范围
          </label>
          <select id="time-range" class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500">
            <option value="all">全部时间</option>
            <option value="today">今日</option>
            <option value="week">本周</option>
            <option value="month">本月</option>
            <option value="year">本年</option>
          </select>
        </div>

        <!-- 最小浏览量 -->
        <div class="flex-1">
          <label for="min-views" class="block text-sm font-medium text-gray-700 mb-2">
            最小浏览量
          </label>
          <input 
            type="number" 
            id="min-views" 
            placeholder="如：100"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
          />
        </div>

        <!-- 应用筛选按钮 -->
        <div class="flex items-end">
          <button id="apply-filters" class="btn btn-primary">
            应用筛选
          </button>
        </div>
      </div>
    </div>

    <!-- 统计信息 -->
    <div id="ranking-stats" class="hidden bg-blue-50 rounded-lg p-6 mb-8">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div class="text-center">
          <div class="text-2xl font-bold text-blue-600" id="total-software">-</div>
          <div class="text-sm text-gray-600">软件总数</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-blue-600" id="total-views">-</div>
          <div class="text-sm text-gray-600">总浏览量</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-blue-600" id="average-views">-</div>
          <div class="text-sm text-gray-600">平均浏览量</div>
        </div>
      </div>
    </div>

    <!-- 加载状态 -->
    <div id="ranking-loading" class="flex justify-center py-12">
      <LoadingSpinner size="lg" text="正在加载排行榜..." />
    </div>

    <!-- 错误状态 -->
    <div id="ranking-error" class="hidden">
      <ErrorMessage 
        title="加载失败" 
        message="无法加载排行榜数据，请稍后重试"
      />
      <div class="text-center mt-4">
        <button id="ranking-retry" class="btn btn-primary">
          重新加载
        </button>
      </div>
    </div>

    <!-- 排行榜列表 -->
    <div id="ranking-container" class="hidden">
      <!-- 排行榜内容将在这里动态加载 -->
    </div>

    <!-- 分页 -->
    <div id="ranking-pagination" class="hidden mt-8 flex justify-center">
      <!-- 分页控件将在这里动态加载 -->
    </div>

    <!-- 空状态 -->
    <div id="ranking-empty" class="hidden text-center py-12">
      <div class="text-gray-400 text-6xl mb-4">📊</div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">暂无排行榜数据</h3>
      <p class="text-gray-500">还没有软件浏览数据</p>
    </div>
  </div>
</Layout>

<script>
  import { initializeApiClient, getApiClient } from '../lib/api';
  import { apiConfig } from '../lib/config';

  // 初始化 API 客户端
  initializeApiClient(apiConfig);

  class RankingPage {
    private currentPage = 1;
    private pageSize = 20;
    private totalPages = 1;
    private currentFilters: { category: string; timeRange: 'all' | 'today' | 'week' | 'month' | 'year'; minViewCount?: number } = {
      category: '',
      timeRange: 'all',
      minViewCount: undefined
    };

    constructor() {
      this.init();
    }

    private init() {
      this.setupEventListeners();
      this.loadRanking();
    }

    private setupEventListeners() {
      // 筛选按钮
      const applyButton = document.getElementById('apply-filters');
      applyButton?.addEventListener('click', () => this.applyFilters());

      // 重试按钮
      const retryButton = document.getElementById('ranking-retry');
      retryButton?.addEventListener('click', () => this.loadRanking());

      // 回车键应用筛选
      const minViewsInput = document.getElementById('min-views');
      minViewsInput?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          this.applyFilters();
        }
      });
    }

    private applyFilters() {
      const categorySelect = document.getElementById('category-filter') as HTMLSelectElement;
      const timeRangeSelect = document.getElementById('time-range') as HTMLSelectElement;
      const minViewsInput = document.getElementById('min-views') as HTMLInputElement;

      this.currentFilters = {
        category: categorySelect?.value || '',
        timeRange: (['all', 'today', 'week', 'month', 'year'].includes(timeRangeSelect?.value || '') ? timeRangeSelect?.value || 'all' : 'all') as 'all' | 'today' | 'week' | 'month' | 'year',
        minViewCount: minViewsInput?.value ? parseInt(minViewsInput.value) : undefined
      };

      this.currentPage = 1;
      this.loadRanking();
    }

    private showLoading() {
      this.hideAll();
      document.getElementById('ranking-loading')?.classList.remove('hidden');
    }

    private showError() {
      this.hideAll();
      document.getElementById('ranking-error')?.classList.remove('hidden');
    }

    private showEmpty() {
      this.hideAll();
      document.getElementById('ranking-empty')?.classList.remove('hidden');
    }

    private showContent() {
      this.hideAll();
      document.getElementById('ranking-container')?.classList.remove('hidden');
      document.getElementById('ranking-pagination')?.classList.remove('hidden');
      document.getElementById('ranking-stats')?.classList.remove('hidden');
    }

    private hideAll() {
      document.getElementById('ranking-loading')?.classList.add('hidden');
      document.getElementById('ranking-error')?.classList.add('hidden');
      document.getElementById('ranking-empty')?.classList.add('hidden');
      document.getElementById('ranking-container')?.classList.add('hidden');
      document.getElementById('ranking-pagination')?.classList.add('hidden');
      document.getElementById('ranking-stats')?.classList.add('hidden');
    }

    private async loadRanking() {
      this.showLoading();

      try {
        const api = getApiClient();
        const params = {
          page: this.currentPage,
          limit: this.pageSize,
          ...this.currentFilters
        };

        // 移除空值
        Object.keys(params).forEach(key => {
          const paramKey = key as keyof typeof params;
          if (params[paramKey] === '' || params[paramKey] === undefined) {
            delete (params as Record<string, any>)[paramKey];
          }
        });

        const response = await api.getSoftwareRanking(params);

        if (response.success && response.data) {
          const softwareList = response.data;
          
          if (!Array.isArray(softwareList) || softwareList.length === 0) {
            this.showEmpty();
            return;
          }

          // 更新分页信息
          if (response.pagination) {
            this.totalPages = response.pagination.totalPages || 1;
          }

          // 更新统计信息
          if (response.summary) {
            this.updateStats(response.summary);
          }

          this.renderRanking(softwareList);
          this.renderPagination();
          this.showContent();
        } else {
          throw new Error(response.message || '获取排行榜失败');
        }
      } catch (error) {
        console.error('加载排行榜失败:', error);
        this.showError();
      }
    }

    private updateStats(summary: any) {
      const totalSoftwareEl = document.getElementById('total-software');
      const totalViewsEl = document.getElementById('total-views');
      const averageViewsEl = document.getElementById('average-views');

      if (totalSoftwareEl) totalSoftwareEl.textContent = summary.totalSoftware?.toLocaleString() || '-';
      if (totalViewsEl) totalViewsEl.textContent = summary.totalViews?.toLocaleString() || '-';
      if (averageViewsEl) averageViewsEl.textContent = Math.round(summary.averageViews || 0).toLocaleString();
    }

    private renderRanking(softwareList: any[]) {
      const container = document.getElementById('ranking-container');
      if (!container) return;

      container.innerHTML = `
        <div class="space-y-4">
          ${softwareList.map((software, index) => `
            <div class="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200 p-6">
              <div class="flex items-center space-x-4">
                <!-- 排名 -->
                <div class="flex-shrink-0">
                  <div class="w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-lg ${
                    software.rank === 1 ? 'bg-yellow-500' :
                    software.rank === 2 ? 'bg-gray-400' :
                    software.rank === 3 ? 'bg-orange-500' :
                    'bg-blue-500'
                  }">
                    ${software.rank || ((this.currentPage - 1) * this.pageSize + index + 1)}
                  </div>
                </div>

                <!-- 软件信息 -->
                <div class="flex-1 min-w-0">
                  <div class="flex items-start justify-between">
                    <div class="flex-1">
                      <h3 class="text-lg font-semibold text-gray-900 truncate">
                        <a href="/software/${software.id}" class="hover:text-primary-600 transition-colors">
                          ${software.name}
                        </a>
                      </h3>
                      ${software.nameEn ? `<p class="text-sm text-gray-500 truncate mt-1">${software.nameEn}</p>` : ''}
                      ${software.description ? `
                        <p class="text-gray-600 text-sm mt-2 line-clamp-2">
                          ${software.description}
                        </p>
                      ` : ''}
                    </div>
                    
                    <div class="flex flex-col items-end space-y-2 ml-4">
                      <div class="flex items-center space-x-2">
                        <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-primary-100 text-primary-800">
                          v${software.currentVersion}
                        </span>
                        ${software.category ? `
                          <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-gray-100 text-gray-800">
                            ${software.category}
                          </span>
                        ` : ''}
                      </div>
                      
                      <div class="flex items-center text-orange-600 font-semibold">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                        ${software.viewCount?.toLocaleString() || 0} 次浏览
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    }

    private renderPagination() {
      const container = document.getElementById('ranking-pagination');
      if (!container || this.totalPages <= 1) {
        container?.classList.add('hidden');
        return;
      }

      const startPage = Math.max(1, this.currentPage - 2);
      const endPage = Math.min(this.totalPages, this.currentPage + 2);
      const pages = [];

      for (let i = startPage; i <= endPage; i++) {
        pages.push(i);
      }

      container.innerHTML = `
        <nav class="flex items-center space-x-2">
          ${this.currentPage > 1 ? `
            <button onclick="rankingPage.goToPage(${this.currentPage - 1})" class="btn btn-outline btn-sm">
              上一页
            </button>
          ` : ''}
          
          ${pages.map(page => `
            <button 
              onclick="rankingPage.goToPage(${page})" 
              class="btn ${page === this.currentPage ? 'btn-primary' : 'btn-outline'} btn-sm"
            >
              ${page}
            </button>
          `).join('')}
          
          ${this.currentPage < this.totalPages ? `
            <button onclick="rankingPage.goToPage(${this.currentPage + 1})" class="btn btn-outline btn-sm">
              下一页
            </button>
          ` : ''}
        </nav>
      `;
    }

    public goToPage(page: number) {
      if (page >= 1 && page <= this.totalPages && page !== this.currentPage) {
        this.currentPage = page;
        this.loadRanking();
      }
    }
  }

  // 全局变量，供分页按钮调用
  let rankingPage: RankingPage;

  document.addEventListener('DOMContentLoaded', () => {
    rankingPage = new RankingPage();
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
