---
import Header from '../components/layout/Header.astro';
import Footer from '../components/layout/Footer.astro';
import { appConfig } from '../lib/config';
import '../styles/global.css';

export interface Props {
  title?: string;
  description?: string;
  showSearch?: boolean;
  class?: string;
}

const { 
  title = appConfig.title, 
  description = appConfig.description,
  showSearch = true,
  class: className = ''
} = Astro.props;

const fullTitle = title === appConfig.title ? title : `${title} - ${appConfig.title}`;
---

<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content="软件管理,软件下载,激活码,LACS" />
    <meta name="author" content={appConfig.author} />
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content={appConfig.title} />
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Theme Color -->
    <meta name="theme-color" content={appConfig.theme.primaryColor} />

    <!-- Viewport Meta for Mobile -->
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

    <!-- Umami Analytics -->
    <script defer src="https://umami.lacs.cc/script.js" data-website-id="99e40abd-3eaa-47a1-a6b4-84fc6831aa4e"></script>
    
    <!-- Prevent FOUC (Flash of Unstyled Content) -->
    <style>
      html {
        visibility: hidden;
        opacity: 0;
      }
    </style>
  </head>
  
  <body class="min-h-screen bg-gray-50 text-gray-900">
    <!-- Skip to main content link for accessibility -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary-600 text-white px-4 py-2 rounded-md z-50">
      跳转到主要内容
    </a>

    <!-- Header -->
    <Header title={appConfig.title} showSearch={showSearch} />
    
    <!-- Main Content -->
    <main id="main-content" class={`flex-1 ${className}`}>
      <slot />
    </main>
    
    <!-- Footer -->
    <Footer />

    <!-- Loading indicator -->
    <div id="loading-indicator" class="fixed top-0 left-0 w-full h-1 bg-primary-600 transform scale-x-0 transition-transform duration-300 z-50"></div>

    <!-- Toast notifications container -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>
    
    <!-- Global Scripts -->
    <script>
      // 导入认证模块
      import { appConfig } from '../lib/config';

      // 扩展Window接口
      interface Window {
        appConfig: typeof appConfig;
        showLoading: () => void;
        hideLoading: () => void;
        showToast: (message: string, type?: 'success'|'error'|'warning'|'info', duration?: number) => void;
      }

      // Remove FOUC prevention
      document.addEventListener('DOMContentLoaded', () => {
        document.documentElement.style.visibility = 'visible';
        document.documentElement.style.opacity = '1';

        // 设置全局变量
        window.appConfig = appConfig;
      });
      
      // Global loading indicator
      let loadingCount = 0;
      
      (window as any).showLoading = () => {
        loadingCount++;
        const indicator = document.getElementById('loading-indicator');
        if (indicator) {
          indicator.style.transform = 'scaleX(1)';
        }
      };
      
      (window as any).hideLoading = () => {
        loadingCount = Math.max(0, loadingCount - 1);
        if (loadingCount === 0) {
          const indicator = document.getElementById('loading-indicator');
          if (indicator) {
            indicator.style.transform = 'scaleX(0)';
          }
        }
      };
      
      // Global toast notification system
      window.showToast = (message, type = 'info', duration = 3000) => {
        const container = document.getElementById('toast-container');
        if (!container) return;
        
        const toast = document.createElement('div');
        toast.className = `
          px-4 py-3 rounded-md shadow-lg transform transition-all duration-300 translate-x-full
          ${type === 'success' ? 'bg-green-500 text-white' : ''}
          ${type === 'error' ? 'bg-red-500 text-white' : ''}
          ${type === 'warning' ? 'bg-yellow-500 text-white' : ''}
          ${type === 'info' ? 'bg-blue-500 text-white' : ''}
        `;
        toast.textContent = message;
        
        container.appendChild(toast);
        
        // Animate in
        setTimeout(() => {
          toast.style.transform = 'translateX(0)';
        }, 10);
        
        // Auto remove
        setTimeout(() => {
          toast.style.transform = 'translateX(full)';
          setTimeout(() => {
            if (container.contains(toast)) {
              container.removeChild(toast);
            }
          }, 300);
        }, duration);
      };
      
      // Global error handler
      window.addEventListener('error', (event) => {
        console.error('Global error:', event.error);
        window.showToast?.('发生了一个错误，请稍后重试', 'error');
      });
      
      // Global unhandled promise rejection handler
      window.addEventListener('unhandledrejection', (event) => {
        console.error('Unhandled promise rejection:', event.reason);
        window.showToast?.('网络请求失败，请检查网络连接', 'error');
      });
      
      // Smooth scroll for anchor links
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement | null;
        if (target?.tagName === 'A' && target.getAttribute('href')?.startsWith('#')) {
          e.preventDefault();
          const id = target.getAttribute('href')?.substring(1);
          if (id) {
            const element = document.getElementById(id);
            if (element) {
              element.scrollIntoView({ behavior: 'smooth' });
            }
          }
        }
      });
    </script>
    
    <style>
      /* Ensure smooth transitions */
      html {
        scroll-behavior: smooth;
        transition: visibility 0.3s, opacity 0.3s;
      }
      
      /* Focus styles for accessibility */
      .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
      }
      
      .focus\:not-sr-only:focus {
        position: static;
        width: auto;
        height: auto;
        padding: 0.5rem 1rem;
        margin: 0;
        overflow: visible;
        clip: auto;
        white-space: normal;
      }
      
      /* Custom scrollbar */
      ::-webkit-scrollbar {
        width: 8px;
      }
      
      ::-webkit-scrollbar-track {
        background: #f1f5f9;
      }
      
      ::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 4px;
      }
      
      ::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
      }
    </style>
  </body>
</html>
